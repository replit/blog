{"_id":"post-be88603c-2f17-4ca5-b160-a85438cdedc6","_type":"post","title":"Making Git Good","slug":{"_type":"slug","current":"git-good"},"body":[{"_key":"9251c02bed41","children":[{"_type":"span","_key":"9251c02bed410","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"3ea4630953c0","children":[{"_type":"span","marks":[],"text":"Improving Git on Replit","_key":"3ea4630953c00"}],"markDefs":[],"_type":"block","style":"h1"},{"_key":"4118e0f9e2aa","children":[{"_type":"span","marks":[],"text":"There has been a new Git pane in Repls for a little while now. This new Git UI you see is a part of a complete rewrite of everything Git-related on Replit: both engineering and design. It is the start of our journey into more deeply integrating Git into Replit, with much more to come. Let's talk about it!","_key":"4118e0f9e2aa0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"ff0fee6f8a92","children":[{"_type":"span","_key":"ff0fee6f8a920","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"3a9d142b2e11","children":[{"_type":"span","marks":[],"text":"Design challenges","_key":"3a9d142b2e110"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"b6076071ddde","children":[{"_type":"span","marks":[],"text":"Making Git more accessible","_key":"b6076071ddde0"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"6f81feb4a17b","children":[{"_type":"span","marks":[],"text":"Git can be hard to use. Whether you’re a professional developer or a beginner, it’s incredibly easy to make ","_key":"6f81feb4a17b0"},{"_type":"span","marks":["f327cf8ebca4"],"text":"simple mistakes that seem impossible to fix","_key":"6f81feb4a17b1"},{"_type":"span","marks":[],"text":" and can suck hours out of your productivity. Ultimately, dealing with bugs and misunderstandings like these sink your attention into learning obscure tools and distract you from what you're actually trying to build.","_key":"6f81feb4a17b2"}],"markDefs":[{"_key":"f327cf8ebca4","_type":"link","href":"https://ohshitgit.com/"}],"_type":"block","style":"normal"},{"_key":"b4822a7b3d80","children":[{"_type":"span","marks":[],"text":"That being said, we didn't try to do things like rename terms or introduce new concepts. Everything you see in the new UI is \"regular git\" except we really tried to tie a few concepts together visually and simplify workflows (multiple steps you'd usually take in a row while working on a project). For example, grouping commits, staging, and ","_key":"b4822a7b3d800"},{"_type":"span","marks":["code"],"text":".gitignore","_key":"b4822a7b3d801"},{"_type":"span","marks":[],"text":" data together. We also made the commit timeline more interactive, and added \"remote modules\" interspersed with the timeline that lets you know which commits are up to date with the remote.","_key":"b4822a7b3d802"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"178a7b2fce37","children":[{"_type":"span","_key":"178a7b2fce370","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"b11499703199","children":[{"_type":"span","marks":[],"text":"Unfortunately, previous efforts to improve the git experience were unsuccessful because the previous Git pane was built using legacy code and architectural patterns (Redux anyone?). It was slow, had bugs and no-one wanted to touch it. That’s why we've completely rebuilt the Git integration, striving for it to be accessible to beginners and powerful for professionals. This rewrite allowed us to move faster and build a significantly better experience.","_key":"b114997031990"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"0511099f4845","children":[{"_type":"span","marks":[],"text":"Designing for desktop and mobile","_key":"0511099f48450"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"573efaebed3c","children":[{"_type":"span","marks":[],"text":"Our new Git pane was designed for both desktop and mobile without compromising functionality or experience on either platform. In fact, all of our mocks were designed on mobile first, and ","_key":"573efaebed3c0"},{"_type":"span","marks":["em"],"text":"no","_key":"573efaebed3c1"},{"_type":"span","marks":[],"text":" modifications were made to make it work well on desktop. Of course, there's some form-factor customization we can do in the future, but building mobile-first was a great foundation.","_key":"573efaebed3c2"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6795b4bcd4eb","children":[{"_type":"span","marks":[],"text":"Making it flexible and resilient","_key":"6795b4bcd4eb0"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"ce687f1b0318","children":[{"_type":"span","marks":[],"text":"Remember: Git is an \"open source ","_key":"ce687f1b03180"},{"_type":"span","marks":["strong"],"text":"distributed","_key":"ce687f1b03181"},{"_type":"span","marks":[],"text":" version control system,\" which means you can't guarantee where a contribution is coming from! It could be from the GitHub website, auto-generated by a deployment bot, from someone's local machine, from Replit, or wherever Git is installed. This made developing seemingly simple features really difficult because of all the edge cases– even something like showing a person's Avatar next to their commit! We have some special cases for GitHub support, but ultimately you can use this new git client with or without GitHub and the experience should largely be the same.","_key":"ce687f1b03182"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7291e1ced09e","children":[{"_type":"span","marks":[],"text":"Further, we took this as an opportunity to really make merging easy to follow and understand. There's still a lot of work left here (especially to integrate with the rest of the IDE), but we made sure to clearly expose as many useful error and warning states as possible with the merge UI.","_key":"7291e1ced09e0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"35803f1fd1d0","children":[{"_type":"span","_key":"35803f1fd1d00","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"834c784754c9","children":[{"_type":"span","marks":[],"text":"Knowing when to open Pandora's box","_key":"834c784754c90"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"0198916df7b8","children":[{"_type":"span","marks":[],"text":"We faced a lot of scoping issues in the beginning of this project. On one hand, since we own the whole IDE, we could really go crazy and make a \"replit-native\" version control system. Or, we could simply \"make git good\" and focus and get something out the door that was better than the previous git pane. We opted for the latter option, especially since the old Git experience was actively causing bugs in existing projects. There's still a future where we totally reinvent what \"history\" means on Replit, but for now we also need to guarantee that the standard version control experience is top notch.","_key":"0198916df7b80"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7bf4b4f2273e","children":[{"_type":"span","marks":[],"text":"Powering the Pane","_key":"7bf4b4f2273e0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"4b286aa20767","children":[{"_type":"span","marks":[],"text":"Powering the new pane is a newly created Git service. It allows for safe and reliable interactions, getting fully typed responses back from Git.","_key":"4b286aa207670"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"d870f7022aa2","children":[{"_type":"span","marks":[],"text":"Nailing the Basics","_key":"d870f7022aa20"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"6471e6a8bc3c","children":[{"_type":"span","marks":[],"text":"When architecting the new Git service we set out to nail the basics. It should be able to reliably perform everyday tasks like getting diffs, staging files, committing, and pushing. And it shouldn’t regress. Achieving this means starting out with a solid foundation. You need a maintainable service with ergonomic APIs that work reliably so bad code design doesn’t become bad user experience.","_key":"6471e6a8bc3c0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"396b7fda31d0","children":[{"_type":"span","marks":[],"text":"Complexities of Git","_key":"396b7fda31d00"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"f61071cd6eda","children":[{"_type":"span","marks":[],"text":"That’s a daunting task. Git, frankly, can be maddening:","_key":"f61071cd6eda0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"aaad5dbd22d0","children":[{"_type":"span","marks":[],"text":"It doesn’t work the way you might expect it to: it’s snapshot based instead of patch based","_key":"aaad5dbd22d00"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"d31a664acd04","children":[{"_type":"span","marks":[],"text":"The state of a Git repository can be extremely complicated, partially due to the number of features Git has, and partially due to how much it allows for configuring a repository","_key":"d31a664acd040"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"d171f51d3067","children":[{"_type":"span","marks":[],"text":"Determining useful information like when a branch was merged or what branch it was merged into is surprisingly hard or outright unsupported","_key":"d171f51d30670"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"9003aa2f3c74","children":[{"_type":"span","marks":[],"text":"It’s easy to confuse popular Git services like GitHub with Git itself. You don’t need a GitHub repository to use Git, but to a beginner they might seem the same!","_key":"9003aa2f3c740"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"6ab3a9ef5dcc","children":[{"_type":"span","marks":[],"text":"Error-Hardened Behavior","_key":"6ab3a9ef5dcc0"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"cdb1ec9423d1","children":[{"_type":"span","marks":[],"text":"The new service is built to account for these complexities and more. It employs defensive logic to make sure the repository is always in a safe state before executing Git commands so they run predictably. The service is extensively tested, letting us ship with confidence knowing that core features won’t regress. It doesn’t naively assume that Git calls will always succeed, it ","_key":"cdb1ec9423d10"},{"_type":"span","marks":["em"],"text":"expects","_key":"cdb1ec9423d11"},{"_type":"span","marks":[],"text":" errors.","_key":"cdb1ec9423d12"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"33d539e7ec22","children":[{"_type":"span","marks":[],"text":"The service knows how to parse errors and depending on the command it can even work around them automatically. If an error is not recoverable, it’s surfaced transparently to whatever was using the service.","_key":"33d539e7ec220"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"1fa94c65bc3e","children":[{"_type":"span","marks":[],"text":"A good demonstration of this hardened behavior is the Git pane's unborn branch view, which will be shown when you're on a branch with no commits. This is an uncommon state, usually only seen when first initializing a repository. Try opening a Repl and forcefully entering this state with the shell command ","_key":"1fa94c65bc3e0"},{"_type":"span","marks":["code"],"text":"git checkout --orphan your-new-branch","_key":"1fa94c65bc3e1"},{"_type":"span","marks":[],"text":" and see how the Git pane handles it!","_key":"1fa94c65bc3e2"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"2f2516ab4c80","children":[{"_type":"span","marks":[],"text":"We hope to one day open source this service, so that you may use it in your own projects.","_key":"2f2516ab4c800"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"417602508ac9","children":[{"_type":"span","marks":[],"text":"Future Work","_key":"417602508ac90"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"b9c04d06d5fe","children":[{"_type":"span","marks":[],"text":"We have a lot more we want to do with Git. Integration into our ","_key":"b9c04d06d5fe0"},{"_type":"span","marks":["583bbde04dc0"],"text":"OT based editing and history","_key":"b9c04d06d5fe1"},{"_type":"span","marks":[],"text":", rich file diffing, UI that can handle the complexity of merging and rebasing, and so on. We are also trying to take inspiration from common workflows like using ","_key":"b9c04d06d5fe2"},{"_type":"span","marks":["61cd5fd29709"],"text":"undo/redo and copy/paste together","_key":"b9c04d06d5fe3"},{"_type":"span","marks":[],"text":". Our efforts to improve your experience with using Git on Replit will end only once it's a seamless and reliable part of the workspace.","_key":"b9c04d06d5fe4"}],"markDefs":[{"_key":"583bbde04dc0","_type":"link","href":"https://blog.replit.com/history2-release"},{"_key":"61cd5fd29709","_type":"link","href":"https://tyler.cafe/graphics-and-versions#undoredo-+-copypaste-is-an-unbeatable-pair"}],"_type":"block","style":"normal"}],"publishedAt":"2023-05-15T00:00:00.000Z"}