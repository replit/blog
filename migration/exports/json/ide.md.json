{"_id":"post-9cbe15cc-8177-4aa3-8061-5e209698cf37","_type":"post","title":"Modular, fast, small: how we built a server-rendered IDE","slug":{"_type":"slug","current":"ide"},"body":[{"_key":"6eb6949feda4","children":[{"_type":"span","marks":[],"text":"At Repl.it our mission is to make programming more accessible, which means our coding environment needs to be lightweight, load fast, and work from anywhere in the world. However, as with so many software projects that evolve with time, we accumulated some bloat (luckily, we haven't included a ","_key":"6eb6949feda40"},{"_type":"span","marks":["490cf41200a5"],"text":"mail client","_key":"6eb6949feda41"},{"_type":"span","marks":[],"text":" yet) and quite a few ad-hoc hacks to glue everything together. In this post, we'll go over how we designed our new IDE to have a small core (everything is a plugin), to be easily customizable (even on the fly), and to server-render.","_key":"6eb6949feda42"}],"markDefs":[{"_key":"490cf41200a5","_type":"link","href":"http://www.catb.org/jargon/html/Z/Zawinskis-Law.html"}],"_type":"block","style":"normal"},{"_key":"433722a35f88","children":[{"_type":"span","marks":[],"text":"The old IDE","_key":"433722a35f880"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"f48ff0dbbe47","children":[{"_type":"span","marks":[],"text":"React encourages you to layout and compose your components as they appear on the page. Our workspace started out looking something like this:","_key":"f48ff0dbbe470"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"<Workspace>\n    <Split>\n        <Editor />\n        <Console />\n    </Split>\n</Workspace>\n","_key":"64e452d152c7"},{"_key":"2fa592aa429b","children":[{"_type":"span","marks":[],"text":"But this lacks configurability. For every language, we have a slightly different configuration. Some have tabs, console, a web viewer, or language-specific components like ","_key":"2fa592aa429b0"},{"_type":"span","marks":["01b363a53afd"],"text":"python turtle","_key":"2fa592aa429b1"},{"_type":"span","marks":[],"text":". Additionally, every language has a different engine powering it with its own interface and set of capabilities. All this configuration logic used to get crammed into the top-level component with ever-increasing branching logic. Furthermore, runtime configuration must be explicitly written for every language. Modifying the layout for one language leads to more hardcoded logic and components and single-use components. This, in turn, caused making changes to one component a game of updating and testing every possible parent.","_key":"2fa592aa429b2"}],"markDefs":[{"_key":"01b363a53afd","_type":"link","href":"https://repl.it/@amasad/square"}],"_type":"block","style":"normal"},{"_key":"959697e32d1a","children":[{"_type":"span","marks":[],"text":"Rewrite","_key":"959697e32d1a0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"d3cb1dae93cc","children":[{"_type":"span","marks":[],"text":"Starting out we had a few goals, most importantly, it needs to load quickly even over a slow connection; server-side rendering is essential here. It also must be easily extensible, and be configurable enough to take the shape of any workspace environment we need in the future. We also wanted to avoid rewriting as much code as possible from our old environment. Looking around we didn't find any existing solution that quite fit the bill, most environments afforded us too little customization, were too hefty, and server-side rendering was never going to happen without major changes to the core.","_key":"d3cb1dae93cc0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"4008255d71c2","children":[{"_type":"span","marks":[],"text":"We ended up settling on building a new lightweight core (around 3000 LOC) to achieve this. It primarily functions as a window manager and a middleman for events. All components are bundled up into a plugin which can expose a render target or internal state management. This was achieved using React and Redux (although the general design does not depend on them).","_key":"4008255d71c20"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"334390398a46","children":[{"_type":"span","marks":[],"text":"Plugins","_key":"334390398a460"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"a25ac669c1f9","children":[{"_type":"span","marks":[],"text":"Every workspace starts out empty (a valid state). We bootstrap the initial state by dispatching actions dictated by the configuration. A nice side effect of this is all configurations must be able to be reached at runtime. This is great for debugging: open Redux Devtools you can see the state evolving from the point of creation and can easily time-travel back and forward. Furthermore, this makes debugging production errors a lot easier -- Redux actions tell you the whole story!","_key":"a25ac669c1f90"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"dc2a44e74b61","children":[{"_type":"span","marks":[],"text":"All a plugin have to do to build up its state is expose a reducer. Here is what a simple plugin to display the running status might look like:","_key":"dc2a44e74b610"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"\nconst Component = ({ running }) => <div>{running ? 'running' : 'stopped'}</div>;\n\nfunction reducer(state = { running: false }, action) {\n    switch (action.type) {\n        case 'EVAL_STARTED':\n            return { running: true };\n        case 'EVAL_ENDED':\n            return { running: false };\n    }\n\n    return state;\n}\n\nexport { Component, reducer };\n","_key":"cc382c7af26c"},{"_key":"b7cbc4c70bd2","children":[{"_type":"span","marks":[],"text":"When the workspace loads an instance of this plugin it will mount the reducer within its own state.","_key":"b7cbc4c70bd20"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5925370e79cc","children":[{"_type":"span","marks":[],"text":"Plugins can also register their own middleware, we call this the receiver. So now that we have a plugin that shows the evaluation status, we need one to actually do the evaluation. For that we simply expose a receiver and listen on an ","_key":"5925370e79cc0"},{"_type":"span","marks":["code"],"text":"EVAL_CODE","_key":"5925370e79cc1"},{"_type":"span","marks":[],"text":" action (which might be dispatched by say a \"run\" button):","_key":"5925370e79cc2"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"\nfunction receiver(dispatch, action) {\n    switch (action.type) {\n        case 'EVAL_CODE':\n            dispatch(evalCode(action.code));\n    }\n}\n\nfunction evalCode(code) {\n    return (dispatch) => {\n        dispatch({ type: 'EVAL_STARTED' });\n        eval(code) // don't actually do this\n        dispatch({ type: 'EVAL_ENDED' });\n    };\n}\n\nexport { receiver };\n","_key":"2a917e25caa7"},{"_key":"3430f4c26afa","children":[{"_type":"span","marks":[],"text":"These plugins work together when loaded but have no direct dependency on each other. Our evaling plugin could easily be swapped out with something else, say something that executes the code on the server instead of the client.","_key":"3430f4c26afa0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"a6b6556eaba7","children":[{"_type":"span","marks":[],"text":"Layout","_key":"a6b6556eaba70"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"db3b601a5fd1","children":[{"_type":"span","marks":[],"text":"To actually render React components we mount the window manager as the workspace's root and pass it a tree that looks something like this:","_key":"db3b601a5fd10"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"              ┌─────┐\n              │split│\n              └─────┘\n              /     \\\n          ┌────┐   ┌───────┐\n          │tabs│   │console│\n          └────┘   └───────┘\n         /  |   \\\n        /   |    \\\n┌───────┐┌───────┐┌───────┐\n│editor1││editor2││editor3│\n└───────┘└───────┘└───────┘\n","_key":"224341d3db46"},{"_key":"f50fb96655bf","children":[{"_type":"span","marks":[],"text":"Each node is either a built-in window managing component (tabs and splits) or the instance id of a plugin. All relavent state for the layout nodes is contained within the layout (i.e. tabs have an active tab, splits have a position), all changes to the layout can be dispatched via built-in actions. This makes it trivial for any plugin to make changes to the layout. With the layout outside of the plugin's control and all state handled within the plugin, it becomes very easy to drop any plugin anywhere.","_key":"f50fb96655bf0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"da51f921565d","children":[{"_type":"span","marks":[],"text":"We can easily do something like (if we're being silly enough):","_key":"da51f921565d0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"dc026dbd821a","children":[{"_type":"span","marks":[],"text":"Because the layout is also a Redux state we can easily change it at runtime. Here is for example how the debugger plugin splits shows itself below the console:","_key":"dc026dbd821a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"function show({ wid, pluginId }) {\n  return (dispatch, getState) => {\n    const { layout, parts } = getState().workspace[wid];\n\n    if (!Layout.has(layout, pluginId)) {\n      const { path, to } = Layout.insert(\n        layout,\n        pluginId,\n        'below',\n        Layout.byName(layout, parts, 'console') || Layout.root(),\n      );\n\n      dispatch(\n        updateLayout({\n          wid,\n          path,\n          to,\n        }),\n      );\n    }\n  };\n}\n\nfunction reciever(wid, pluginId, action) {\n  switch (action.type) {\n    case 'DEBUG_STARTED':\n      return show({ wid, pluginId });\n    case 'DEBUG_ENDED':\n      return hide({ wid, pluginId });\n  }\n\n  return null;\n}\n\nexport { Debugger, reducer, reciever };\n","_key":"10c1585b83d4"},{"_key":"c314c6683fef","children":[{"_type":"span","marks":[],"text":"Server-side rendering","_key":"c314c6683fef0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"2602927770af","children":[{"_type":"span","marks":[],"text":"One of the worst things about the modern web is the spinner (or is it throbber?) so for the rewrite we decided we'd never do that and try to render as much as possible on the server and show something on the screen as early as possible. For that we used Next.js which makes server-side rendering a lot less painful, bootstrapping the initial state from the server is especially nice. For the most part we try to have parity between server and client but some components are so DOM-specific that it's almost impossible to render on the server without including something like JSDom. For this we have a property that the window manager sends to all plugins ","_key":"2602927770af0"},{"_type":"span","marks":["code"],"text":"static","_key":"2602927770af1"},{"_type":"span","marks":[],"text":" to inform them that, if they need to, they can render a static version of themselves (for now it's only the editor that requires this).","_key":"2602927770af2"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"35d0974e3b5b","children":[{"_type":"span","marks":[],"text":"Conclusion","_key":"35d0974e3b5b0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"5b1fed5e5b4f","children":[{"_type":"span","marks":[],"text":"Going forward we're focusing on making the core framework as simple and as correct as possible. Flowtype made Redux a whole lot easier to reason about because every action has clear definition, but we think it can be better and are exploring rewriting the core framework in ReasonML. We're hoping to open-source this in the future and open it up for anyone to write plugins for.","_key":"5b1fed5e5b4f0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6669e56b2ecb","children":[{"_type":"span","marks":[],"text":"This rewrite already unlocked for us a lot of features that can now be easily implemented. Look out for a filetree component and a unit test runner coming to an online REPL near you.","_key":"6669e56b2ecb0"}],"markDefs":[],"_type":"block","style":"normal"}],"publishedAt":"2018-02-14T08:00:00.000Z"}