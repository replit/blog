{"_id":"post-e7010d65-7972-4575-af1c-cb84d7dc1240","_type":"post","title":"Building Towards a Holistic Development Service","slug":{"_type":"slug","current":"holistic"},"body":[{"_key":"6abf1e20f9bb","children":[{"_type":"span","marks":[],"text":"Software development is one of the first -- if not the first -- examples of what J. C. Licklider called the ","_key":"6abf1e20f9bb0"},{"_type":"span","marks":["em","d78037e4e6b1"],"text":"Man-Computer Symbiosis","_key":"6abf1e20f9bb1"},{"_type":"span","marks":[],"text":". A ","_key":"6abf1e20f9bb2"},{"_type":"span","marks":["em"],"text":"\"cooperative interaction\"","_key":"6abf1e20f9bb3"},{"_type":"span","marks":[],"text":" between people and computers where the person is concerned in what may be classified as the creative aspect of the work such as setting the goals, formulating the hypothesis and evaluating the results while the computer does all the ","_key":"6abf1e20f9bb4"},{"_type":"span","marks":["em"],"text":"\"routinizable work\"","_key":"6abf1e20f9bb5"},{"_type":"span","marks":[],"text":".","_key":"6abf1e20f9bb6"}],"markDefs":[{"_key":"d78037e4e6b1","_type":"link","href":"https://groups.csail.mit.edu/medg/people/psz/Licklider.html"}],"_type":"block","style":"normal"},{"_key":"1ddb757952c6","children":[{"_type":"span","marks":[],"text":"This symbiotic partnership is especially effective for work that puts to the test our intellectual capacity like keeping all the moving parts of a large software system in our head. Or as Dijkstra warns us ","_key":"1ddb757952c60"},{"_type":"span","marks":["em"],"text":"\"the competent programmer is fully aware of the strictly limited size of his own skull\"","_key":"1ddb757952c61"},{"_type":"span","marks":[],"text":".","_key":"1ddb757952c62"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"ef0a299e7e6f","children":[{"_type":"span","marks":[],"text":"This begins to explain why software engineers are so passionate about their tools. From the good old ","_key":"ef0a299e7e6f0"},{"_type":"span","marks":["d131424d4654"],"text":"editor wars","_key":"ef0a299e7e6f1"},{"_type":"span","marks":[],"text":" to ","_key":"ef0a299e7e6f2"},{"_type":"span","marks":["1beb96e1e50a"],"text":"JavaScript fatigue","_key":"ef0a299e7e6f3"},{"_type":"span","marks":[],"text":", we're continuously adding and improving on our arsenal because this is the best way we know how to become better engineers. From a business point-of-view, it might also explain the seemingly sudden rise and growth of the developer tools market: hosted version control, infrastructure, devops and automation etc.","_key":"ef0a299e7e6f4"}],"markDefs":[{"_key":"d131424d4654","_type":"link","href":"https://xkcd.com/378/"},{"_key":"1beb96e1e50a","_type":"link","href":"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4"}],"_type":"block","style":"normal"},{"_key":"c798042a94e8","children":[{"_type":"span","marks":[],"text":"Despite all this success I think we've fallen victim to the onetime useful Unix dictum ","_key":"c798042a94e80"},{"_type":"span","marks":["em"],"text":"Do One Thing and Do it Well","_key":"c798042a94e81"},{"_type":"span","marks":[],"text":". Roughly speaking, we separate our tools by development life-cycle stages: authoring, executing, testing, building, and deployment. Which limits how much information each tool has at its disposal and therefore how much utility it can provide. Sharing the work isn't easy. The text stream as the \"universal interface\" means that, for example, tools need to re-parse code at every stage of the life-cycle to extract whatever meaningful information it needs.","_key":"c798042a94e82"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6d15e4577d11","children":[{"_type":"span","marks":[],"text":"In practice it means I can't upgrade to the latest release of my favorite programming language because I need to wait on all my tools to upgrade their parsers. And this is not a theoretic problem, consider the fact that the website that you're probably reading this on was authored in ES2016 JavaScript, parsed and compiled to ES5 and then parsed again and minified and then parsed yet again to finally run in your browser which most likely runs ES2016 (back full-circle).","_key":"6d15e4577d110"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7f4a02b5133e","children":[{"_type":"span","marks":[],"text":"However, we'd like to take a stab at the problem from an angle that we, at Replit, are uniquely situated to do. Our mission is to make programming more accessible, so when we design we focus on the hobbyist and the learner (although a lot of engineers also get a lot of value from our service). This relieves us from the pressure of having to build tools that needs to compete and achieve parity with existing development tools. Our users are open to things that makes it easier for them to learn, play, and share.","_key":"7f4a02b5133e0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"896b728ec495","children":[{"_type":"span","marks":[],"text":"We're building towards a holistic development service from the ground up. It all started from a ","_key":"896b728ec4950"},{"_type":"span","marks":["173458d64eed"],"text":"service","_key":"896b728ec4951"},{"_type":"span","marks":[],"text":" that could execute user code. Then it gained the ability to ","_key":"896b728ec4952"},{"_type":"span","marks":["44de6e531535"],"text":"monitor the file system","_key":"896b728ec4953"},{"_type":"span","marks":[],"text":" and understand basic project structure and modules. Then it grew to do simple code intelligence tasks like ","_key":"896b728ec4954"},{"_type":"span","marks":["083feaa5db8d"],"text":"Linting","_key":"896b728ec4955"},{"_type":"span","marks":[],"text":". Then when we released our ","_key":"896b728ec4956"},{"_type":"span","marks":["5d1815f0b90d"],"text":"educator tools","_key":"896b728ec4957"},{"_type":"span","marks":[],"text":", the same service running on the same files gained the ability to run unit tests. And now it's growing to understand deployment. We envision this to become a ","_key":"896b728ec4958"},{"_type":"span","marks":["strong"],"text":"long-lived always-on service that understands code in all its stages and can be put at your disposal anywhere you are regardless of your device, platform, or the programming language you're using","_key":"896b728ec4959"},{"_type":"span","marks":[],"text":".","_key":"896b728ec49510"}],"markDefs":[{"_key":"173458d64eed","_type":"link","href":"/api"},{"_key":"44de6e531535","_type":"link","href":"file-updates"},{"_key":"083feaa5db8d","_type":"link","href":"pylint"},{"_key":"5d1815f0b90d","_type":"link","href":"/classroom"}],"_type":"block","style":"normal"},{"_key":"97b249f16dec","children":[{"_type":"span","marks":[],"text":"Since all this has happened organically -- at startup development speed -- some of it is adhoc and janky, however, all behind a single neat protocol. As we continue to build more products that use the same primitives (project filesystem, code execution, code intelligence, etc) it became clear to us that we we have the opportunity to build something general and abstract that allows to not only move faster but -- more importantly -- to provide a better service for our users.","_key":"97b249f16dec0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"89acfab9ab96","children":[{"_type":"span","marks":[],"text":"With time we'll be sharing more technical details and hopefully build parts of it in the open.","_key":"89acfab9ab960"}],"markDefs":[],"_type":"block","style":"normal"}],"publishedAt":"2017-03-27T07:00:00.000Z"}