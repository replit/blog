{"_id":"post-5472dc6a-ecdb-4c64-b61e-24b6f5168e61","_type":"post","title":"Making Repl.it Collaborative at Heart","slug":{"_type":"slug","current":"collab"},"body":[{"_key":"8df1e8bbe465","children":[{"_type":"span","marks":[],"text":"Coding, people believed, was an activity hackers did alone. While that might have been true in the past, the world is changing. New programmers come online every day and they want to effortlessly work and interact with others while writing code. Yet collaborative coding environments have remained troublesome to setup.","_key":"8df1e8bbe4650"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5842ee64f96d","children":[{"_type":"span","marks":[],"text":"Last year we launched Multiplayer, our real-time collaborative system, in beta. We’ve learned a lot since then. We’ve learned that while real-time coding is useful and fun, asynchronous collaboration is important for users working on long-term projects (which people are increasingly doing on Repl.it). We’ve learned that Multiplayer needs to be a core feature of the product -- not something you “turn on.” This meant a redesign of our core protocol and infrastructure to make it collaborative at heart.","_key":"5842ee64f96d0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"552fc54abaf5","children":[{"_type":"span","marks":[],"text":"Repl.it is now natively ","_key":"552fc54abaf50"},{"_type":"span","marks":["181410b9f5ca"],"text":"Multiplayer","_key":"552fc54abaf51"},{"_type":"span","marks":[],"text":": Collaborators can code together at the same time or asynchronously, real time editing is more robust, and every IDE feature works seamlessly in a collaborative setting.","_key":"552fc54abaf52"}],"markDefs":[{"_key":"181410b9f5ca","_type":"link","href":"/site/multiplayer"}],"_type":"block","style":"normal"},{"_type":"embed","_id":"f2b6a184-9a34-4acb-ab70-0ae0b5ba517b","url":"https://www.youtube.com/embed/kO0EJJcuW1k","_key":"4da7f8c373aa"},{"_key":"0eb860627fdf","children":[{"_type":"span","marks":[],"text":"Protocol Changes & Operational Transformation","_key":"0eb860627fdf0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"c2b14c782725","children":[{"_type":"span","marks":[],"text":"The major challenge in making Repl.it collaborative at heart was adapting all our existing functionality to work seamlessly in a multiplayer environment. For a very long time we’ve gotten away with keeping the protocol very simple. Modeled after the Read-Eval-Print-Loop with a strict state machine. Only one action could be processed at a time and had to run to completion.","_key":"c2b14c7827250"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"64b3eab335ba","children":[{"_type":"span","_key":"64b3eab335ba0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"26fc078af092","children":[{"_type":"span","marks":[],"text":"As features were added we ended up with something like a Read-(eval|format|lint|write file|etc.)-Print-Loop. This lead to some unititive behavior: what happens if someone could format code while someone else was in the middle of debugging? In a multiplayer setting, these issues compounded making the experience buggy and slow at times.","_key":"26fc078af0920"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"aaece38dda9d","children":[{"_type":"span","marks":[],"text":"Enter Collaborative Development Protocol (CDP): A scalable service-oriented approach for remote development and collaboration. It starts with channels -- every function is an isolated channel. Want to write to a file? You open a channel. Want to eval? You open a channel. Want to install a package? You do it on the package manager channel. Even opening a channel occurs on a control channel everyone starts with. With channels as the core concept, collaboration is built right into the design. To share a resource, clients need only connect to the same channel.","_key":"aaece38dda9d0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5865c71df789","children":[{"_type":"span","marks":[],"text":"Here is how'd you implement a simple REPL using CDP:","_key":"5865c71df7890"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"import CDP from '@replit/collab_dev_proto';\n\nconst client = CDP.connect({ language: 'python' });\n\n// channel 0 is the control channel\nconst control = client.getChannel(0);\n\nconst evaler = await control.send({\n  openChannel: {\n    name: 'evaler',\n    service: 'eval',\n  }\n});\n\nevaler.on('command', command => {\n  if (command.type === 'state') {\n    console.log('Running ', command.status ? 'started' : 'stopped');\n  }\n\n  if (command.type === 'output') {\n    console.log('> ', command.output);\n  }\n})\n\nconst code = window.prompt('type your code')\n\nconst response = await evaler.send({\n  eval: code,\n});\n\nif (response.type === 'error') {\n  console.error(response.error)\n} else {\n  console.log('=> ', response.result);\n}\n","_key":"1b342d34150a"},{"_key":"009d8b134ce8","children":[{"_type":"span","marks":[],"text":"Messages concerning everyone are shared by broadcast. Multiple clients can attach to a channel by using a pre-decided upon channel name, where everyone can read/write. For example, a client can send an eval command to the “evaler” and all other clients will get a message that evaling has started, and then everyone receives the same output.","_key":"009d8b134ce80"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6bb3010d4e49","children":[{"_type":"span","marks":[],"text":"Finally, and perhaps most crucially, file changes are always communicated via Operational Transformation. Operational Transformation (OT) was designed to handle real-time collaborative text document updates, and if Repl.it was going to be collaborative at heart, it needed to speak OT everywhere there was text to update.","_key":"6bb3010d4e490"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6ea35e57abf0","children":[{"_type":"span","marks":[],"text":"File Watching & File Changes","_key":"6ea35e57abf00"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"9fc660352f1a","children":[{"_type":"span","marks":[],"text":"In the request-response model of the old protocol, file changes had to be explicitly asked for. In the new model, however, the client could have a channel with the server (i.e. the container you’re coding in) where file changes are communicated back-and-forth through OT. This made it more efficient versus sending whole files, but, more importantly, it made file changes work concurrently and collaboratively.","_key":"9fc660352f1a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7af67f7915ed","children":[{"_type":"span","marks":[],"text":"Another challenge we had to overcome was moving the file authority from the client to the server. In the past, we made the owner of the repl write file changes from the browser. If we were to do asynchronous collaboration, there would have needed to be some sort of negotiation to figure out which client would be responsible for this in case the owner is not online. But the more sane thing to do was to just move the file authority to the server, which everyone is connected to in the first place.","_key":"7af67f7915ed0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"98bc56af42f0","children":[{"_type":"span","marks":[],"text":"With the server being the authority on files and file changes, we could now implement a file watching daemon that generates OT messages and broadcasts them to subscribed clients. This has the awesome side-effect of programmatic changes appearing in the editor in real-time complete with its own cursor:","_key":"98bc56af42f00"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"10b374385583","children":[{"_type":"span","_key":"10b3743855830","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"bac5c495f935","children":[{"_type":"span","marks":[],"text":"This has been a high-level overview of how we made Repl.it collaborative at heart. In the future, we’ll dive into specific technical and implementation details along with open-sourcing some of the components. For now though, please try it out! Open up a repl, hit that “Invite” button in the header, and starting coding with your friends or coworkers.","_key":"bac5c495f9350"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"b65176a22f78","children":[{"_type":"span","_key":"b65176a22f780","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"}],"publishedAt":"2019-09-18T18:18:49.181Z"}