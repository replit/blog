{"_id":"post-06646b56-2e21-4533-9491-8d02e04a4f96","_type":"post","title":"Automating Minecraft on Replit","slug":{"_type":"slug","current":"automating-minecraft-on-replit"},"body":[{"_key":"6bd00d1b27a6","children":[{"_type":"span","marks":[],"text":"Replcraft is a library that allows you to automate parts of your base on a Minecraft server using code, directly from a repl. Replcraft allows you to get and place blocks, check for entities, move and craft items, read redstone, and more.","_key":"6bd00d1b27a60"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"43b30c4bda25","children":[{"_type":"span","marks":[],"text":"This tutorial will cover a number of small projects you can build using Replcraft. If you'd be interested in joining an official Replit community Minecraft server, seeing more Minecraft-related content in the future, or you just want to leave general feedback, you can do so by commenting on ","_key":"43b30c4bda250"},{"_type":"span","marks":["8151d85fab96"],"text":"this repl","_key":"43b30c4bda251"},{"_type":"span","marks":[],"text":".","_key":"43b30c4bda252"}],"markDefs":[{"_key":"8151d85fab96","_type":"link","href":"https://replit.com/@LeeFleming/Automating-Minecraft-on-Replit#README.md"}],"_type":"block","style":"normal"},{"_key":"5381e33acbb3","children":[{"_type":"span","marks":[],"text":"Getting started","_key":"5381e33acbb30"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"0afb1d3bbe85","children":[{"_type":"span","marks":[],"text":"Before you begin, you'll need a ","_key":"0afb1d3bbe850"},{"_type":"span","marks":["568c9f8cde09"],"text":"Replit account","_key":"0afb1d3bbe851"},{"_type":"span","marks":[],"text":" and a Minecraft account. To get started, fork the ","_key":"0afb1d3bbe852"},{"_type":"span","marks":["2b20c3e40328"],"text":"Replcraft template","_key":"0afb1d3bbe853"},{"_type":"span","marks":[],"text":" and join a Minecraft server running the Replcraft plugin. Next, create a special ","_key":"0afb1d3bbe854"},{"_type":"span","marks":["em"],"text":"structure","_key":"0afb1d3bbe855"},{"_type":"span","marks":[],"text":" made up of a frame of iron blocks:","_key":"0afb1d3bbe856"}],"markDefs":[{"_key":"568c9f8cde09","_type":"link","href":"https://replit.com/login"},{"_key":"2b20c3e40328","_type":"link","href":"https://replit.com/@LeeFleming/Replcraft#readme.md"}],"_type":"block","style":"normal"},{"_key":"e6538fded8b4","children":[{"_type":"span","_key":"e6538fded8b40","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"8035d64c96c6","children":[{"_type":"span","marks":[],"text":"After you're done building the structure, place a sign on the side with the lines ","_key":"8035d64c96c60"},{"_type":"span","marks":["code"],"text":"REPL","_key":"8035d64c96c61"},{"_type":"span","marks":[],"text":", two blank lines, and your Minecraft username. Sneak-interact with the sign to receive your token.","_key":"8035d64c96c62"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"53b0d47ac5e6","children":[{"_type":"span","_key":"53b0d47ac5e60","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7763b36adcc5","children":[{"_type":"span","marks":[],"text":"You can click your token in chat to copy it. Paste your newly acquired token into a ","_key":"7763b36adcc50"},{"_type":"span","marks":["caac8f6acd11"],"text":"secret","_key":"7763b36adcc51"},{"_type":"span","marks":[],"text":" called ","_key":"7763b36adcc52"},{"_type":"span","marks":["code"],"text":"token","_key":"7763b36adcc53"},{"_type":"span","marks":[],"text":". You're now ready to go.","_key":"7763b36adcc54"}],"markDefs":[{"_key":"caac8f6acd11","_type":"link","href":"https://docs.replit.com/tutorials/08-storing-secrets-and-history"}],"_type":"block","style":"normal"},{"_key":"f438f67a4d31","children":[{"_type":"span","marks":[],"text":"Creating things","_key":"f438f67a4d310"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"8c039ff3dd5a","children":[{"_type":"span","marks":[],"text":"You can now perform all sorts of actions from your repl. To start off, lets place some blocks inside the structure. You'll need to provide the materials by placing a chest directly adjacent to any part of your structure and filling it with the required blocks. That chest is now considered part of the structure's inventory, and the ","_key":"8c039ff3dd5a0"},{"_type":"span","marks":["code"],"text":"setBlock(x, y, z, block)","_key":"8c039ff3dd5a1"},{"_type":"span","marks":[],"text":" method will pull from it as necessary.","_key":"8c039ff3dd5a2"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"const ReplCraft = require('./lib/replcraft.js');\nlet client = new ReplCraft();\n\n(async () => {\n  await client.login(process.env.token);\n  client.setBlock(0, 0, 0, 'minecraft:cobblestone'); // !\n})();\n","_key":"ecf9b9fd891c"},{"_key":"72366bd65207","children":[{"_type":"span","_key":"72366bd652070","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"036db710c499","children":[{"_type":"span","marks":[],"text":"Tips","_key":"036db710c4990"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"1ab9e2279492","children":[{"_type":"span","marks":[],"text":"All coordinates are relative to your structure. ","_key":"1ab9e22794920"},{"_type":"span","marks":["code"],"text":"(0, 0, 0)","_key":"1ab9e22794921"},{"_type":"span","marks":[],"text":" is located in the northwest corner.","_key":"1ab9e22794922"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"1c7ed6589bf0","children":[{"_type":"span","marks":[],"text":"To figure out what block string to use, you can use the ","_key":"1c7ed6589bf00"},{"_type":"span","marks":["code"],"text":"getBlock(x, y, z)","_key":"1c7ed6589bf01"},{"_type":"span","marks":[],"text":" method:","_key":"1c7ed6589bf02"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_type":"codeBlock","language":"text","codeContent":"// ...\nlet block = await client.getBlock(0, 0, 0);\nconsole.log(block);\n","_key":"dac9173c02e3"},{"_key":"6112d5457bd4","children":[{"_type":"span","marks":["code"],"text":"setBlock","_key":"6112d5457bd40"},{"_type":"span","marks":[],"text":" will break any block already at the given coordinates and deposit all dropped items into any available chest connected to the structure. An alternative form of the API is also available to specify a specific chest inside the structure to use: ","_key":"6112d5457bd41"},{"_type":"span","marks":["code"],"text":"setBlock(x, y, z, block, sourceChestX, scy, scz, destinationChestX, dcy, dcz)","_key":"6112d5457bd42"},{"_type":"span","marks":[],"text":".","_key":"6112d5457bd43"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"05fbc8f5f669","children":[{"_type":"span","marks":[],"text":"To break a block without placing a new one, you can use the ","_key":"05fbc8f5f6690"},{"_type":"span","marks":["code"],"text":"minecraft:air","_key":"05fbc8f5f6691"},{"_type":"span","marks":[],"text":" psuedoblock: ","_key":"05fbc8f5f6692"},{"_type":"span","marks":["code"],"text":"setBlock(0, 0, 0, 'minecraft:air')","_key":"05fbc8f5f6693"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"6c00a3778646","children":[{"_type":"span","marks":[],"text":"Watching for block updates","_key":"6c00a37786460"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"c1d207eec384","children":[{"_type":"span","marks":["code"],"text":"getBlock","_key":"c1d207eec3840"},{"_type":"span","marks":[],"text":" is useful, but what if we need to know about block changes immediately? Replcraft provides a set of event-based and poll-based update streams that you can subscribe to with the ","_key":"c1d207eec3841"},{"_type":"span","marks":["code"],"text":"watch","_key":"c1d207eec3842"},{"_type":"span","marks":[],"text":" and ","_key":"c1d207eec3843"},{"_type":"span","marks":["code"],"text":"poll","_key":"c1d207eec3844"},{"_type":"span","marks":[],"text":" methods. When a subscribed block changes, the client will emit a ","_key":"c1d207eec3845"},{"_type":"span","marks":["code"],"text":"block update","_key":"c1d207eec3846"},{"_type":"span","marks":[],"text":" event.","_key":"c1d207eec3847"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"c91ad20e3bb1","children":[{"_type":"span","marks":[],"text":"Lets use ","_key":"c91ad20e3bb10"},{"_type":"span","marks":["code"],"text":"poll","_key":"c91ad20e3bb11"},{"_type":"span","marks":[],"text":" to efficiently gather lots of cobblestone:","_key":"c91ad20e3bb12"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"// ...\nclient.poll(0, 0, 0);\nclient.on('block update', (cause, block, x, y, z) => {\n  if (block == 'minecraft:cobblestone') {\n    // `air` is a special block that represents no block.\n    // We can place it for its side effect of breaking any existing block.\n    client.setBlock(0, 0, 0, 'minecraft:air');\n  }\n});\n","_key":"0f56195896b8"},{"_key":"e7da297104ce","children":[{"_type":"span","_key":"e7da297104ce0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"aa614f821334","children":[{"_type":"span","marks":[],"text":"Now whenever our cobblestone generator generates a new block, we can immediately break it without having to constantly hit the API with ","_key":"aa614f8213340"},{"_type":"span","marks":["code"],"text":"getBlock","_key":"aa614f8213341"},{"_type":"span","marks":[],"text":" or ","_key":"aa614f8213342"},{"_type":"span","marks":["code"],"text":"setBlock","_key":"aa614f8213343"},{"_type":"span","marks":[],"text":" requests. However, ","_key":"aa614f8213344"},{"_type":"span","marks":["code"],"text":"watch","_key":"aa614f8213345"},{"_type":"span","marks":[],"text":" and ","_key":"aa614f8213346"},{"_type":"span","marks":["code"],"text":"poll","_key":"aa614f8213347"},{"_type":"span","marks":[],"text":" come with some respective downsides:","_key":"aa614f8213348"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"bf3c77859eda","children":[{"_type":"span","marks":[],"text":"Due to API limitations, ","_key":"bf3c77859eda0"},{"_type":"span","marks":["code"],"text":"watch","_key":"bf3c77859eda1"},{"_type":"span","marks":[],"text":" is only capable of catching certain kinds of changes. It's useful for when you need to see a known-good type of change fast.","_key":"bf3c77859eda2"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"43674c564935","children":[{"_type":"span","marks":["code"],"text":"poll","_key":"43674c5649350"},{"_type":"span","marks":[],"text":" will catch all types of changes by constantly re-examining all polled blocks. Repolling every single block would be slow, so only one block is examined per tick. The more blocks you poll, the longer it takes for you to be notified about changes to any individual block. Note that ","_key":"43674c5649351"},{"_type":"span","marks":["code"],"text":"poll","_key":"43674c5649352"},{"_type":"span","marks":[],"text":" can miss changes if a block is changed and then changed back - for example, if we're replacing broken cobblestone faster than we can check for it.","_key":"43674c5649353"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"85bce6c26fcb","children":[{"_type":"span","marks":[],"text":"Using both together can be a powerful tool.","_key":"85bce6c26fcb0"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"015487229cdd","children":[{"_type":"span","marks":[],"text":"Checking for entities","_key":"015487229cdd0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"a60d1fe84c1b","children":[{"_type":"span","marks":[],"text":"Another thing we can automate is checking for entities inside your region. Maybe you have someone that you want to play a prank on: when they enter your structure, it should trap them! Anybody else should be left alone, though.","_key":"a60d1fe84c1b0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7b5d7da03545","children":[{"_type":"span","marks":[],"text":"Lets first conceal our structure so that they don't suspect a thing:","_key":"7b5d7da035450"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"b6d9c641d330","children":[{"_type":"span","_key":"b6d9c641d3300","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"a526a52f57eb","children":[{"_type":"span","marks":[],"text":"Then, to figure out what blocks we'll need to place, lets run a utility script:","_key":"a526a52f57eb0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"client.watchAll();\nclient.on('block update', (cause, block, x, y, z) => {\n  console.log({ cause, block, x, y, z });\n});\n","_key":"4a2fd225acec"},{"_key":"623adb042d9a","children":[{"_type":"span","marks":[],"text":"And then place some blocks:","_key":"623adb042d9a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"{ cause: 'place', block: 'minecraft:cobblestone', x: 1, y: 1, z: 1 }\n{ cause: 'place', block: 'minecraft:cobblestone', x: 1, y: 2, z: 1 }\n","_key":"bb2f138d3444"},{"_key":"618a41a89b4f","children":[{"_type":"span","marks":[],"text":"Excellent. Let's prepare our trap and await our victim...","_key":"618a41a89b4f0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"const ReplCraft = require('./lib/replcraft.js');\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\n(async () => {\n  let client = new ReplCraft();\n  await client.login(process.env.token);\n\n  while(true) {\n    let entities = await client.getEntities();\n    let has_victim = entities.some(entity => {\n      return (\n        entity.type == 'PLAYER' && // Look for players...\n        entity.name == 'eelblock' && // Named \"eelblock\"...\n        entity.x <= 1 // And then wait for them to get all the way inside\n      )\n    });\n    if (has_victim) break; // We've got him!\n    await sleep(1000); // Nobody here, let's check again later...\n  }\n\n  // The trap is sprung!\n  client.setBlock(1, 1, 1, 'minecraft:obsidian' /* indestructible! */);\n  client.setBlock(1, 2, 1, 'minecraft:obsidian');\n})();\n","_key":"f1d4e2745d28"},{"_key":"062bfef2a6a8","children":[{"_type":"span","_key":"062bfef2a6a80","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"53ef0f100197","children":[{"_type":"span","marks":[],"text":"Curses! Foiled again!","_key":"53ef0f1001970"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7e3715e07ddc","children":[{"_type":"span","marks":[],"text":"Though it seems our trap isn't very useful after all. They've just teleported ","_key":"7e3715e07ddc0"},{"_type":"span","marks":["code"],"text":"/home","_key":"7e3715e07ddc1"},{"_type":"span","marks":[],"text":" - oops!","_key":"7e3715e07ddc2"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"aa3c1757ff54","children":[{"_type":"span","marks":[],"text":"Listening for redstone","_key":"aa3c1757ff540"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"d10daa79470b","children":[{"_type":"span","marks":[],"text":"Unfortunately, ","_key":"d10daa79470b0"},{"_type":"span","marks":["code"],"text":"getEntities()","_key":"d10daa79470b1"},{"_type":"span","marks":[],"text":" is an expensive API call! To make it cheaper, we can utilize regular old pressure plates and redstone. ","_key":"d10daa79470b2"},{"_type":"span","marks":["code"],"text":"watch","_key":"d10daa79470b3"},{"_type":"span","marks":[],"text":" is capable of observing redstone-related block updates, which allows us to efficiently watch redstone-enabled blocks such as a redstone lamp.","_key":"d10daa79470b4"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"675b4e778441","children":[{"_type":"span","marks":[],"text":"First, lets use our utility script again and place a redstone lamp:","_key":"675b4e7784410"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"{ cause: 'place', block: 'minecraft:redstone_lamp[lit=false]', x: 0, y: 0, z: 1 }\n","_key":"d1c7ef9312b4"},{"_key":"15c2bf70c1d1","children":[{"_type":"span","_key":"15c2bf70c1d10","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"2167f9ed9ab8","children":[{"_type":"span","marks":[],"text":"We can now ","_key":"2167f9ed9ab80"},{"_type":"span","marks":["code"],"text":"watch","_key":"2167f9ed9ab81"},{"_type":"span","marks":[],"text":" that lamp, and take an action when something triggers the pressure plate.","_key":"2167f9ed9ab82"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"// ...\nawait client.watch(0, 0, 1);\nclient.on('block update', async (cause, block, x, y, z) => {\n  if (block == 'minecraft:redstone_lamp[lit=true]') {\n    // Spring the trap! Or do other things!\n  }\n});\n","_key":"8ea6a65a36db"},{"_key":"ff85ade03f75","children":[{"_type":"span","marks":[],"text":"Automatic crafting","_key":"ff85ade03f750"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"269dd9318245","children":[{"_type":"span","marks":[],"text":"Lets automate some crafting. Replcraft provides the ","_key":"269dd93182450"},{"_type":"span","marks":["code"],"text":"craft(x, y, z, itemRef[])","_key":"269dd93182451"},{"_type":"span","marks":[],"text":" method which takes a destination for the crafted item and nine ","_key":"269dd93182452"},{"_type":"span","marks":["em"],"text":"item references","_key":"269dd93182453"},{"_type":"span","marks":[],"text":". An item reference is an object of the form ","_key":"269dd93182454"},{"_type":"span","marks":["code"],"text":"{ x, y, z, index }","_key":"269dd93182455"},{"_type":"span","marks":[],"text":", referring to the coordinates of the chest containing the ingredient and the slot index in that chest. The list of item references must be nine nullable item references long, and corresponds to a 3x3 crafting table grid.","_key":"269dd93182456"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"1e5ae485eb42","children":[{"_type":"span","marks":[],"text":"In order to ","_key":"1e5ae485eb420"},{"_type":"span","marks":["em"],"text":"find","_key":"1e5ae485eb421"},{"_type":"span","marks":[],"text":" item references, you can use the ","_key":"1e5ae485eb422"},{"_type":"span","marks":["code"],"text":"getInventory(x, y, z)","_key":"1e5ae485eb423"},{"_type":"span","marks":[],"text":" method, which returns an array of ","_key":"1e5ae485eb424"},{"_type":"span","marks":["code"],"text":"{ index, type, amount }","_key":"1e5ae485eb425"},{"_type":"span","marks":[],"text":" describing the items in a given container.","_key":"1e5ae485eb426"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"af8f31f1901a","children":[{"_type":"span","marks":[],"text":"Here's our setup:","_key":"af8f31f1901a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"dd2eec677ca2","children":[{"_type":"span","marks":[],"text":"First of all, let's define some recipes. A quick word of warning: recipes must ","_key":"dd2eec677ca20"},{"_type":"span","marks":["em"],"text":"exactly","_key":"dd2eec677ca21"},{"_type":"span","marks":[],"text":" match their vanilla definitions, and can't be shifted around like they can in a regular crafting table. Try moving the recipe to the left or flipping it horizontally if you're having trouble getting it to work.","_key":"dd2eec677ca22"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"let cobble = 'minecraft:cobblestone';\nlet stick = 'minecraft:stick';\nlet recipes = {\n  sword: [\n    cobble, null, null,\n    cobble, null, null,\n    stick , null, null\n  ],\n  // ...\n}\n","_key":"4c900dbd8c92"},{"_key":"b657dfb8f8ed","children":[{"_type":"span","marks":[],"text":"Then, describe where to find the items:","_key":"b657dfb8f8ed0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"let items = {\n  'minecraft:cobblestone': {\n    location: [0, 0, 1],\n    stacks: await client.getInventory(0, 0, 1)\n  },\n  'minecraft:stick': {\n    location: [0, 0, 2],\n    stacks: await client.getInventory(0, 0, 2)\n  }\n}\n","_key":"4db7c71e0540"},{"_key":"274590f8eb9d","children":[{"_type":"span","marks":[],"text":"And now, put it all together. For each item, look up its ingredient in the items table, do some quick math to make sure there's enough, then commit the crafting operation:","_key":"274590f8eb9d0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"const ReplCraft = require('./lib/replcraft.js');\n(async () => {\n  let client = new ReplCraft();\n  await client.login(process.env.token);\n\n  let cobble = 'minecraft:cobblestone';\n  let stick = 'minecraft:stick';\n  let tools = {\n    sword: [\n      cobble, null, null,\n      cobble, null, null,\n      stick , null, null\n    ],\n    pickaxe: [\n      cobble, cobble, cobble,\n      null  , stick , null  ,\n      null  , stick , null\n    ],\n    shovel: [\n      cobble, null, null,\n      stick , null, null,\n      stick , null, null\n    ],\n    axe: [\n      cobble, cobble, null,\n      cobble, stick , null,\n      null  , stick , null\n    ]\n  };\n\n  let items = {\n    'minecraft:cobblestone': {\n      location: [0, 0, 1],\n      stacks: await client.getInventory(0, 0, 1)\n    },\n    'minecraft:stick': {\n      location: [0, 0, 2],\n      stacks: await client.getInventory(0, 0, 2)\n    }\n  }\n\n  for (let [tool, ingredients] of Object.entries(tools)) {\n    console.log(\"Crafting\", tool);\n    await client.craft(0, 0, 0, ingredients.map(itemType => {\n      if (itemType == null) return null;\n\n      let item = items[itemType].stacks.filter(item => {\n        return item.type == itemType && item.amount > 0;\n      })[0];\n      if (!item) throw new Error(`Out of ${itemType}`);\n      item.amount -= 1;\n\n      let [x, y, z] = items[itemType].location;\n      return { index: item.index, x, y, z };\n    }));\n  }\n})();\n","_key":"5e667ff10060"},{"_key":"10d1d2bee22e","children":[{"_type":"span","_key":"10d1d2bee22e0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"0f06fbca0cc4","children":[{"_type":"span","marks":[],"text":"Excellent! This script will only make one of each tool, but you can modify it to watch the chest and keep it restocked. You could also experiment with automating the entire pipeline, running a tree farm and cobblestone generator to supply the raw materials.","_key":"0f06fbca0cc40"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"61c2db7c5b79","children":[{"_type":"span","marks":[],"text":"Advanced building: Cut and paste","_key":"61c2db7c5b790"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"346b8f97e8ba","children":[{"_type":"span","marks":[],"text":"Are you bored of your current environment? Let's move your entire base somewhere else! To make this scheme even more interesting, we'll use minecarts to automatically move lots of material long distances.","_key":"346b8f97e8ba0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5baae3e4382f","children":[{"_type":"span","marks":[],"text":"Here's our setup:","_key":"5baae3e4382f0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"cd3083483781","children":[{"_type":"span","_key":"cd30834837810","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"03412577ce73","children":[{"_type":"span","marks":[],"text":"In order to move our house, we're going to check what each block is, remove the block, wait for the minecart to transport it, and finally place it in the other structure. We'll also need to make two seperate clients, one for each structure.","_key":"03412577ce730"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"ea2f8cad5af7","children":[{"_type":"span","marks":[],"text":"To iterate the whole structure, we can use the ","_key":"ea2f8cad5af70"},{"_type":"span","marks":["code"],"text":"getSize()","_key":"ea2f8cad5af71"},{"_type":"span","marks":[],"text":" API to retrieve its interior dimensions. Then, for each block, move it to the other structure. This means we'll have to break it, wait for the minecart to transport it, and then place it again on the other side.","_key":"ea2f8cad5af72"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"57fab86eb596","children":[{"_type":"span","marks":[],"text":"Let's try it:","_key":"57fab86eb5960"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"const ReplCraft = require('./lib/replcraft.js');\n\nconst sleep = ms => new Promise(res => setTimeout(res, ms));\nlet sourceClient = new ReplCraft();\nlet destClient = new ReplCraft();\n\n(async () => {\n  await sourceClient.login(process.env.tokenSource);\n  await destClient.login(process.env.tokenDest);\n\n  let [size_x, size_y, size_z] = await destClient.getSize();\n\n  for (let y = 0; y < size_y; y++) {\n    for (let x = 0; x < size_x; x++) {\n      for (let z = 0; z < size_z; z++) {\n        let block = await sourceClient.getBlock(x, y, z);\n        await sourceClient.setBlock(x, y, z, 'minecraft:air');\n        // Wait for the minecart to make a roundtrip.\n        // If you're particularly inventive, you can figure out how to\n        // use redstone signals or container checking to determine when\n        // the items have arrived, or use more minecarts to deliver them faster.\n        await sleep(5000);\n        try {\n         await destClient.setBlock(x, y, z, block);\n        } catch(ex) {\n         console.log(`Failed to move block at ${x} ${y} ${z}: ${ex}`);\n        }\n      }\n    }\n  }\n})()\n","_key":"2ceca8cd537a"},{"_key":"1a5ff3ad16ea","children":[{"_type":"span","marks":[],"text":"Let's try it!","_key":"1a5ff3ad16ea0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"efa4c1d257eb","children":[{"_type":"span","_key":"efa4c1d257eb0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"ef75db30d6a5","children":[{"_type":"span","marks":[],"text":"It works! Unfortunantly, it's not perfect and we've lost some glass blocks:","_key":"ef75db30d6a50"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"Error: invalid operation: No GLASS available in any attached chests. @ (0, 1, 2)\nError: invalid operation: No GLASS available in any attached chests. @ (2, 1, 0)\nError: invalid operation: No GLASS available in any attached chests. @ (2, 1, 4)\n","_key":"ecfc301899da"},{"_key":"fba8806413f1","children":[{"_type":"span","marks":[],"text":"When breaking blocks, normal Minecraft rules apply. Stone becomes cobblestone, and glass shatters. You'll have to find an alternate source of glass, or accept the lost blocks. The roof blocks have also slightly deformed because stairs change their connections when their neighbors are broken. We could fix this by scanning the whole structure in advance.","_key":"fba8806413f10"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"a320e081273a","children":[{"_type":"span","marks":[],"text":"Advanced building: Drawing images","_key":"a320e081273a0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"4e04c70b9b52","children":[{"_type":"span","marks":[],"text":"Lets try something a little more artistic. Start off with a ","_key":"4e04c70b9b520"},{"_type":"span","marks":["code"],"text":"16","_key":"4e04c70b9b521"},{"_type":"span","marks":[],"text":"x","_key":"4e04c70b9b522"},{"_type":"span","marks":["code"],"text":"1","_key":"4e04c70b9b523"},{"_type":"span","marks":[],"text":"x","_key":"4e04c70b9b524"},{"_type":"span","marks":["code"],"text":"16","_key":"4e04c70b9b525"},{"_type":"span","marks":[],"text":" structure, and add at least four stacks of each color of wool to chests connected to the structure.","_key":"4e04c70b9b526"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"2f3c8807872b","children":[{"_type":"span","marks":[],"text":"Now we'll need to figure out what color the various wool blocks are. ","_key":"2f3c8807872b0"},{"_type":"span","marks":["5cdd999098e5"],"text":"This answer","_key":"2f3c8807872b1"},{"_type":"span","marks":[],"text":" provides a list we can use. Let's convert that into a more useful format. We can use this ","_key":"2f3c8807872b2"},{"_type":"span","marks":["42efd70a9ed9"],"text":"regular expression and replacement rule","_key":"2f3c8807872b3"},{"_type":"span","marks":[],"text":" to convert the list into psuedo-json:","_key":"2f3c8807872b4"}],"markDefs":[{"_key":"5cdd999098e5","_type":"link","href":"https://gaming.stackexchange.com/a/47214"},{"_key":"42efd70a9ed9","_type":"link","href":"https://regex101.com/r/9ZjR4H/1"}],"_type":"block","style":"normal"},{"_key":"a0ee1394979b","children":[{"_type":"span","_key":"a0ee1394979b0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"ac76325239cf","children":[{"_type":"span","marks":[],"text":"Then we can convert our psuedo-json into actual json and then from an array into an object by writing a bit of javascript around it. Note that we've split our hex color into three hex numbers, and then added ","_key":"ac76325239cf0"},{"_type":"span","marks":["code"],"text":"0x","_key":"ac76325239cf1"},{"_type":"span","marks":[],"text":" in front of them so that javascript will recognize them as numeric hex literals.","_key":"ac76325239cf2"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"console.log(JSON.stringify(Object.fromEntries([\n  [\"White\", 0xe4, 0xe4, 0xe4],\n  [\"Light Gray\", 0xa0, 0xa7, 0xa7],\n  [\"Dark Gray\", 0x41, 0x41, 0x41],\n  [\"Black\", 0x18, 0x14, 0x14],\n  [\"Red\", 0x9e, 0x2b, 0x27],\n  [\"Orange\", 0xea, 0x7e, 0x35],\n  [\"Yellow\", 0xc2, 0xb5, 0x1c],\n  [\"Lime Green\", 0x39, 0xba, 0x2e],\n  [\"Green\", 0x36, 0x4b, 0x18],\n  [\"Light Blue\", 0x63, 0x87, 0xd2],\n  [\"Cyan\", 0x26, 0x71, 0x91],\n  [\"Blue\", 0x25, 0x31, 0x93],\n  [\"Purple\", 0x7e, 0x34, 0xbf],\n  [\"Magenta\", 0xbe, 0x49, 0xc9],\n  [\"Pink\", 0xd9, 0x81, 0x99],\n  [\"Brown\", 0x56, 0x33, 0x1c],\n].map(([color, r, g, b]) => {\n  return [\n    'minecraft:' + color.toLowerCase().replace(/\\s/, '_') + '_wool',\n    [r, g, b]\n  ];\n}))));\n","_key":"57de604b2973"},{"_key":"89de1bb7e41a","children":[{"_type":"span","marks":[],"text":"We can then take the output from that command, and do a few more edits by hand to tidy it up:","_key":"89de1bb7e41a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"let wools = {\n  \"minecraft:white_wool\": [228,228,228],\n  \"minecraft:light_gray_wool\": [160,167,167],\n  \"minecraft:gray_wool\": [65,65,65], // dark_gray is actually just gray\n  \"minecraft:black_wool\": [24,20,20],\n  \"minecraft:red_wool\": [158,43,39],\n  \"minecraft:orange_wool\": [234,126,53],\n  \"minecraft:yellow_wool\": [194,181,28],\n  \"minecraft:lime_wool\": [57,186,46], // lime_green is actually just lime\n  \"minecraft:green_wool\": [54,75,24],\n  \"minecraft:light_blue_wool\": [99,135,210],\n  \"minecraft:cyan_wool\": [38,113,145],\n  \"minecraft:blue_wool\": [37,49,147],\n  \"minecraft:purple_wool\": [126,52,191],\n  \"minecraft:magenta_wool\": [190,73,201],\n  \"minecraft:pink_wool\": [217,129,153],\n  \"minecraft:brown_wool\": [86,51,28]\n};\n","_key":"1754c94885eb"},{"_key":"af5e4251f572","children":[{"_type":"span","marks":[],"text":"Reading the image","_key":"af5e4251f5720"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"fe595163e1a3","children":[{"_type":"span","marks":[],"text":"We're going to use the ","_key":"fe595163e1a30"},{"_type":"span","marks":["3c708bdea4ec"],"text":"Jimp","_key":"fe595163e1a31"},{"_type":"span","marks":[],"text":" library to read an image and rescale it if necessary.","_key":"fe595163e1a32"}],"markDefs":[{"_key":"3c708bdea4ec","_type":"link","href":"https://www.npmjs.com/package/jimp"}],"_type":"block","style":"normal"},{"_key":"191f0aad50cc","children":[{"_type":"span","marks":[],"text":"First, we need to load an image. Upload an image to your repl and then load it with Jimp:","_key":"191f0aad50cc0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"let image = await Jimp.read('image.png');\nimage.resize(16, 16);\n","_key":"6c10b7c4b3ab"},{"_key":"c69b0f6b38ac","children":[{"_type":"span","marks":[],"text":"After that, we'll need to figure out what color of wool to use. To do that, we can compare our wool colors with the image colors, and pick the closest one. An easy way to do this is to treat both colors as coordinates and calculate the distance between them: ","_key":"c69b0f6b38ac0"},{"_type":"span","marks":["code"],"text":"distance = sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)","_key":"c69b0f6b38ac1"},{"_type":"span","marks":[],"text":".","_key":"c69b0f6b38ac2"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5b510245022a","children":[{"_type":"span","marks":[],"text":"To find the closest points, calculate the distances for each possible color and take the shortest one:","_key":"5b510245022a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"let pixel = Jimp.intToRGBA(image.getPixelColor(x, y));\nlet { wool } = Object.entries(wools)\n  .map(([wool, [r, g, b]]) => { // Calculate the distances\n    let distance = Math.sqrt((pixel.r - r)**2 + (pixel.g - g)**2 + (pixel.b - b)**2);\n    return { wool, distance };\n  })\n  .reduce((a, b) => { // Find the shortest distance\n    return a.distance < b.distance ? a : b;\n  });\n","_key":"03d0ba393eba"},{"_key":"c8f5d58e9744","children":[{"_type":"span","marks":[],"text":"Draw it!","_key":"c8f5d58e97440"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"15208d1201fc","children":[{"_type":"span","marks":[],"text":"Lets put all our code together and iterate over each block:","_key":"15208d1201fc0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"const ReplCraft = require('./lib/replcraft.js');\nconst Jimp = require('jimp');\n\nlet client = new ReplCraft();\nlet wools = {\n  \"minecraft:white_wool\": [228,228,228],\n  \"minecraft:light_gray_wool\": [160,167,167],\n  \"minecraft:gray_wool\": [65,65,65],\n  \"minecraft:black_wool\": [24,20,20],\n  \"minecraft:red_wool\": [158,43,39],\n  \"minecraft:orange_wool\": [234,126,53],\n  \"minecraft:yellow_wool\": [194,181,28],\n  \"minecraft:lime_wool\": [57,186,46],\n  \"minecraft:green_wool\": [54,75,24],\n  \"minecraft:light_blue_wool\": [99,135,210],\n  \"minecraft:cyan_wool\": [38,113,145],\n  \"minecraft:blue_wool\": [37,49,147],\n  \"minecraft:purple_wool\": [126,52,191],\n  \"minecraft:magenta_wool\": [190,73,201],\n  \"minecraft:pink_wool\": [217,129,153],\n  \"minecraft:brown_wool\": [86,51,28]\n};\n\n(async () => {\n  let image = await Jimp.read('image.png');\n  image.resize(16, 16);\n\n  await client.login(process.env.token);\n  let [size_x, _, size_z] = await client.getSize();\n\n  let promises = [];\n  for (let x = 0; x < size_x; x++) {\n    for (let z = 0; z < size_z; z++) {\n      let pixel = Jimp.intToRGBA(image.getPixelColor(x, z));\n      let { wool } = Object.entries(wools)\n        .map(([wool, [r, g, b]]) => {\n          let distance = Math.sqrt((pixel.r - r)**2 + (pixel.g - g)**2 + (pixel.b - b)**2);\n          return { wool, distance };\n        })\n        .reduce((a, b) => {\n          return a.distance < b.distance ? a : b;\n        });\n      promises.push(client.setBlock(x, 0, z, wool));\n    }\n  }\n  await Promise.all(promises);\n  console.log(\"Done!\");\n})();\n","_key":"114985a81fca"},{"_key":"b4f74ffc7bf2","children":[{"_type":"span","_key":"b4f74ffc7bf20","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"f1d2e64ee9fd","children":[{"_type":"span","marks":[],"text":"Great success!","_key":"f1d2e64ee9fd0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6290c11c37ee","children":[{"_type":"span","marks":[],"text":"Side note: Fuel","_key":"6290c11c37ee0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"67081a0643b6","children":[{"_type":"span","marks":[],"text":"ReplCraft has a concept of ","_key":"67081a0643b60"},{"_type":"span","marks":["em"],"text":"fuel","_key":"67081a0643b61"},{"_type":"span","marks":[],"text":", which you use to power API requests. If you run out of fuel, your client library will start throwing errors. Fuel is optional and can be provided by multiple configurable sources, but this tutorial assumes it's disabled.","_key":"67081a0643b62"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"130ab7d89819","children":[{"_type":"span","marks":[],"text":"Three ","_key":"130ab7d898190"},{"_type":"span","marks":["em"],"text":"fuel strategies","_key":"130ab7d898191"},{"_type":"span","marks":[],"text":" exist and can be configured by server owners:","_key":"130ab7d898192"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"b25d666281f4","children":[{"_type":"span","marks":[],"text":"Item strategies, requiring you to burn items in a structure's inventory to power requests. For example, 1 gold nugget might be configured to provide 100 fuel.","_key":"b25d666281f40"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"ecfa4d401f19","children":[{"_type":"span","marks":[],"text":"Ratelimit strategies, which provide a set amount of fuel per time period. These just exist to prevent you from spamming the server with API calls.","_key":"ecfa4d401f190"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"ab528227539a","children":[{"_type":"span","marks":[],"text":"Economy strategies, which use in-game currency to pay for API calls.","_key":"ab528227539a0"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"39ebe6c12ea5","children":[{"_type":"span","marks":[],"text":"If you see errors referencing these strategies, you'll need to offer up the appropriate fuel. You can make your script wait for fuel to become available instead of throwing errors by setting ","_key":"39ebe6c12ea50"},{"_type":"span","marks":["code"],"text":"client.retryOnFuelError(true)","_key":"39ebe6c12ea51"},{"_type":"span","marks":[],"text":". You can also monitor for fuel exhaustion via ","_key":"39ebe6c12ea52"},{"_type":"span","marks":["code"],"text":"client.on(\"outOfFuel\", ex => { /* ... */ })","_key":"39ebe6c12ea53"},{"_type":"span","marks":[],"text":".","_key":"39ebe6c12ea54"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"dcbc1799b663","children":[{"_type":"span","marks":[],"text":"Going further","_key":"dcbc1799b6630"}],"markDefs":[],"_type":"block","style":"h1"},{"_key":"3c22b7447dd6","children":[{"_type":"span","marks":[],"text":"You now know how to make lots of stuff with Replcraft, but that's only the beginning.","_key":"3c22b7447dd60"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"f33326bb9c32","children":[{"_type":"span","marks":[],"text":"ReplCraft can be used to automate lots of things. Create automated farms, expose redstone over HTTP, create a clever escape room, automatically craft items, build an interactive game inside Minecraft, manipulate ChestShop prices, etc. However, it's limited to anything you can build a structure around, and it requires you to manage the supply of blocks!","_key":"f33326bb9c320"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"c36a218fb5ee","children":[{"_type":"span","marks":[],"text":"Bot libraries such as ","_key":"c36a218fb5ee0"},{"_type":"span","marks":["0feb81fdbb65"],"text":"Mineflayer","_key":"c36a218fb5ee1"},{"_type":"span","marks":[],"text":" allow you to do anything a regular player can (but may be against the rules on many servers), and learning how to make mods with the ","_key":"c36a218fb5ee2"},{"_type":"span","marks":["42c005bb7929"],"text":"Spigot","_key":"c36a218fb5ee3"},{"_type":"span","marks":[],"text":", ","_key":"c36a218fb5ee4"},{"_type":"span","marks":["1d9499766331"],"text":"Forge","_key":"c36a218fb5ee5"},{"_type":"span","marks":[],"text":" or ","_key":"c36a218fb5ee6"},{"_type":"span","marks":["79e295578303"],"text":"Fabric","_key":"c36a218fb5ee7"},{"_type":"span","marks":[],"text":" APIs can give you much more control over the game itself.","_key":"c36a218fb5ee8"}],"markDefs":[{"_key":"0feb81fdbb65","_type":"link","href":"https://github.com/PrismarineJS/mineflayer"},{"_key":"42c005bb7929","_type":"link","href":"https://www.spigotmc.org/wiki/spigot-plugin-development/"},{"_key":"1d9499766331","_type":"link","href":"https://mcforge.readthedocs.io/en/1.18.x/"},{"_key":"79e295578303","_type":"link","href":"https://fabricmc.net/wiki/start"}],"_type":"block","style":"normal"},{"_key":"fdd7f89240f7","children":[{"_type":"span","marks":[],"text":"Minecraft is a highly customizable game, and if you're interested in seeing more Minecraft related content or an official Replit community Minecraft server running Replcraft, please leave a comment on ","_key":"fdd7f89240f70"},{"_type":"span","marks":["ef70d084a423"],"text":"this repl","_key":"fdd7f89240f71"},{"_type":"span","marks":[],"text":".","_key":"fdd7f89240f72"}],"markDefs":[{"_key":"ef70d084a423","_type":"link","href":"https://replit.com/@LeeFleming/Automating-Minecraft-on-Replit#README.md"}],"_type":"block","style":"normal"}],"publishedAt":"2022-05-09T19:00:00.000Z"}