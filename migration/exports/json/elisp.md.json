{"_id":"post-e69658fb-efa4-4863-9006-df9532dd8901","_type":"post","title":"Adding a language to Repl.it: Emacs Lisp","slug":{"_type":"slug","current":"elisp"},"body":[{"_key":"f51b6026c0bc","children":[{"_type":"span","marks":[],"text":"At Repl.it, we want to provide a top-tier online programming experience in as many languages as we can support. Today, we’ll show you just how we do that.","_key":"f51b6026c0bc0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6a6598fd77d2","children":[{"_type":"span","marks":[],"text":"Let's look at our 64th and newest language, ","_key":"6a6598fd77d20"},{"_type":"span","marks":["78e813917a40"],"text":"Emacs Lisp","_key":"6a6598fd77d21"},{"_type":"span","marks":[],"text":".","_key":"6a6598fd77d22"}],"markDefs":[{"_key":"78e813917a40","_type":"link","href":"https://en.wikipedia.org/wiki/Emacs_Lisp"}],"_type":"block","style":"normal"},{"_key":"cb091f336457","children":[{"_type":"span","marks":[],"text":"Emacs Lisp is the ","_key":"cb091f3364570"},{"_type":"span","marks":["0ac727d412ef"],"text":"scripting language","_key":"cb091f3364571"},{"_type":"span","marks":[],"text":" used by the ","_key":"cb091f3364572"},{"_type":"span","marks":["b6fae6ea0b0c"],"text":"Emacs","_key":"cb091f3364573"},{"_type":"span","marks":[],"text":" text editor. What makes Emacs Lisp on Repl.it interesting is that Emacs Lisp runs exclusively in the Emacs editor, which is a full, interactive application—not just a command-line program like Python or Ruby.","_key":"cb091f3364574"}],"markDefs":[{"_key":"0ac727d412ef","_type":"link","href":"https://en.wikipedia.org/wiki/Scripting_language"},{"_key":"b6fae6ea0b0c","_type":"link","href":"https://www.gnu.org/software/emacs/"}],"_type":"block","style":"normal"},{"_key":"8af7d795cef4","children":[{"_type":"span","marks":[],"text":"You might be wondering how we handled this. In fact, our infrastructure was already generic enough to deal with a repl inside of Emacs inside of Repl.it!","_key":"8af7d795cef40"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7f68ae07d678","children":[{"_type":"span","marks":["c45898ef1196"],"text":"Check it out here!","_key":"7f68ae07d6780"}],"markDefs":[{"_key":"c45898ef1196","_type":"link","href":"https://repl.it/l/elisp"}],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"54ee7cc5e93e","children":[{"_type":"span","marks":[],"text":"Let’s take a look at how this was implemented. You might be surprised at just how little code was required!","_key":"54ee7cc5e93e0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"cab3a6e8001b","children":[{"_type":"span","marks":[],"text":"Polygott","_key":"cab3a6e8001b0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"931dcc1aba9f","children":[{"_type":"span","marks":[],"text":"The first stop in adding any new language is ","_key":"931dcc1aba9f0"},{"_type":"span","marks":["56ed12d6e7bd"],"text":"Polygott","_key":"931dcc1aba9f1"},{"_type":"span","marks":[],"text":", our open-source project which contains instructions on how to install most of our supported languages.","_key":"931dcc1aba9f2"}],"markDefs":[{"_key":"56ed12d6e7bd","_type":"link","href":"https://github.com/replit/polygott"}],"_type":"block","style":"normal"},{"_key":"3a28b71e6e7c","children":[{"_type":"span","marks":[],"text":"We use ","_key":"3a28b71e6e7c0"},{"_type":"span","marks":["3d135a4e8d67"],"text":"Docker","_key":"3a28b71e6e7c1"},{"_type":"span","marks":[],"text":" to run repls, so this project contains a Dockerfile which reads a configuration file for each language to find out what to install. The file for Emacs Lisp, minus the parts used for testing and other miscellany, ","_key":"3a28b71e6e7c2"},{"_type":"span","marks":["21f10a532e22"],"text":"looks like this","_key":"3a28b71e6e7c3"},{"_type":"span","marks":[],"text":":","_key":"3a28b71e6e7c4"}],"markDefs":[{"_key":"3d135a4e8d67","_type":"link","href":"https://www.docker.com/"},{"_key":"21f10a532e22","_type":"link","href":"https://github.com/replit/polygott/blob/75603d8168da4860ee3bbf74e42e6ad243c3fe86/languages/elisp.toml"}],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"name = \"elisp\"\npackages = [\n  \"emacs26\"\n]\naptRepos = [\n  \"ppa:kelleyk/emacs\"\n]\n","_key":"ac7436a229c8"},{"_key":"b7ea9d6e70f7","children":[{"_type":"span","marks":[],"text":"Emacs Lisp just needs the ","_key":"b7ea9d6e70f70"},{"_type":"span","marks":["60408f434f26"],"text":"Ubuntu package","_key":"b7ea9d6e70f71"},{"_type":"span","marks":[],"text":" for Emacs—but since we want the latest version of Emacs (","_key":"b7ea9d6e70f72"},{"_type":"span","marks":["1439fc151f50"],"text":"as requested on Reddit","_key":"b7ea9d6e70f73"},{"_type":"span","marks":[],"text":"), we pull from ","_key":"b7ea9d6e70f74"},{"_type":"span","marks":["a5ea1798d00f"],"text":"Kevin Kelley's PPA","_key":"b7ea9d6e70f75"},{"_type":"span","marks":[],"text":" instead. There are other keys that can be used in the configuration files of Polygott for more complex installation and configuration procedures.","_key":"b7ea9d6e70f76"}],"markDefs":[{"_key":"60408f434f26","_type":"link","href":"https://packages.ubuntu.com/bionic/emacs-nox"},{"_key":"1439fc151f50","_type":"link","href":"https://www.reddit.com/r/emacs/comments/c5df1x/adding_a_language_to_replit_emacs_lisp/es19ksb"},{"_key":"a5ea1798d00f","_type":"link","href":"https://launchpad.net/~kelleyk/+archive/ubuntu/emacs"}],"_type":"block","style":"normal"},{"_key":"c6e505bc1228","children":[{"_type":"span","marks":[],"text":"That's all we really need to pull Emacs Lisp into our Docker images. Onwards!","_key":"c6e505bc12280"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"ca4a5e829d94","children":[{"_type":"span","marks":[],"text":"Prybar","_key":"ca4a5e829d940"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"d9913fc55950","children":[{"_type":"span","marks":[],"text":"Next up is turning Emacs into a repl for Emacs Lisp. This is handled by another of our open-source projects, ","_key":"d9913fc559500"},{"_type":"span","marks":["0d3431f8b93c"],"text":"Prybar","_key":"d9913fc559501"},{"_type":"span","marks":[],"text":". The idea of Prybar, written in ","_key":"d9913fc559502"},{"_type":"span","marks":["f2b4a097c2d5"],"text":"Go","_key":"d9913fc559503"},{"_type":"span","marks":[],"text":", is to take every programming language that has a repl and expose them all behind the same command-line interface (with some shared basic options, like setting the interactive prompt).","_key":"d9913fc559504"}],"markDefs":[{"_key":"0d3431f8b93c","_type":"link","href":"https://github.com/replit/prybar"},{"_key":"f2b4a097c2d5","_type":"link","href":"https://golang.org/"}],"_type":"block","style":"normal"},{"_key":"aa810b756f5d","children":[{"_type":"span","marks":[],"text":"We used to implement language repls using a client-server protocol: the user would type in some input, we would send it to the repl server, and the server would send back the result and output. This required us to write a repl server for every language: a small Python script for Python, a small Ruby script for Ruby, and so on.","_key":"aa810b756f5d0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"158f1d5feedb","children":[{"_type":"span","marks":[],"text":"Now, though, our philosophy is to get out of the way as soon as possible. This means that instead of managing communication between the client and the programming language, we just start the programming language's built-in repl and then let it handle everything. This means several things: less work for us, more supported languages for you, language-specific features like tab-completion, and a repl experience on Repl.it that is more similar to your offline development.","_key":"158f1d5feedb0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5878bf03d16c","children":[{"_type":"span","marks":[],"text":"That said, sometimes languages' built-in repls don't provide all the features we need. In these cases, we try to use the language's ","_key":"5878bf03d16c0"},{"_type":"span","marks":["658a4e5f9af0"],"text":"C bindings","_key":"5878bf03d16c1"},{"_type":"span","marks":[],"text":" (via ","_key":"5878bf03d16c2"},{"_type":"span","marks":["7734679e47a8"],"text":"cgo","_key":"5878bf03d16c3"},{"_type":"span","marks":[],"text":") to access hidden functionality, and otherwise we write a small script in the language to emulate the features we need.","_key":"5878bf03d16c4"}],"markDefs":[{"_key":"658a4e5f9af0","_type":"link","href":"https://en.wikipedia.org/wiki/Language_binding"},{"_key":"7734679e47a8","_type":"link","href":"https://golang.org/cmd/cgo/"}],"_type":"block","style":"normal"},{"_key":"fe165535b548","children":[{"_type":"span","marks":[],"text":"Unfortunately, Emacs does not provide an expressive command-line interface or good C bindings. What it does provide, though, is an excellent repl for Emacs Lisp, right inside Emacs: ","_key":"fe165535b5480"},{"_type":"span","marks":["ec35c5616360"],"text":"IELM","_key":"fe165535b5481"},{"_type":"span","marks":[],"text":". So we wrote a ","_key":"fe165535b5482"},{"_type":"span","marks":["b853f92d4a9f"],"text":"small script","_key":"fe165535b5483"},{"_type":"span","marks":[],"text":" which parses the Prybar configuration options and then jumps into IELM. You can try it out on your machine with Docker:","_key":"fe165535b5484"}],"markDefs":[{"_key":"ec35c5616360","_type":"link","href":"https://www.masteringemacs.org/article/evaluating-elisp-emacs#the-interactive-emacs-lisp-mode"},{"_key":"b853f92d4a9f","_type":"link","href":"https://github.com/replit/prybar/blob/8f73354aa080e98d2b0ab248a80e086e4004947f/prybar_assets/elisp/repl.el"}],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"$ docker run -it --rm replco/prybar prybar-elisp -i\n","_key":"afaf6ce2ff55"},{"_key":"8fb1eeeadde7","children":[{"_type":"span","marks":[],"text":"(And while you're at it, try replacing ","_key":"8fb1eeeadde70"},{"_type":"span","marks":["code"],"text":"prybar-elisp","_key":"8fb1eeeadde71"},{"_type":"span","marks":[],"text":" with ","_key":"8fb1eeeadde72"},{"_type":"span","marks":["code"],"text":"prybar-python3","_key":"8fb1eeeadde73"},{"_type":"span","marks":[],"text":" or ","_key":"8fb1eeeadde74"},{"_type":"span","marks":["code"],"text":"prybar-ruby","_key":"8fb1eeeadde75"},{"_type":"span","marks":[],"text":"!)","_key":"8fb1eeeadde76"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"7423744ffe07","children":[{"_type":"span","marks":[],"text":"Evaluation server","_key":"7423744ffe070"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"eb09e65ff813","children":[{"_type":"span","marks":[],"text":"Now that we have the tooling in place, let's see what our evaluation API needs to know in order to provide Emacs Lisp as a language on Repl.it.","_key":"eb09e65ff8130"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"5a9e1cf8711a","children":[{"_type":"span","marks":[],"text":"For the most part, we just need to write a single JSON file. The important bits look like this:","_key":"5a9e1cf8711a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"{\n  \"category\": \"Practical\",\n  \"displayName\": \"Emacs Lisp (Elisp)\",\n  \"entrypoint\": \"main.el\",\n  \"icon\": \"https://icons--util.repl.co/emacs.svg\",\n  \"image\": \"images.repl.it/polygott\",\n  \"name\": \"elisp\",\n  \"tagline\": \"Scripting language for the extensible text editor.\",\n\n  \"interpreter\": {\n    \"command\": [\n      \"/run_dir/prybar-elisp\",\n      \"--ps1\",\n      \"\\u001b[33m\\uEEA7\\u001b[00m \",\n      \"-i\",\n      \"-c\",\n      \";; Hint: To type M-x, use ESC x instead.\"\n    ]\n  },\n\n  \"consoleHeader\": \"GNU Emacs 25.2.2\"\n}\n","_key":"c504b4ed7ca1"},{"_key":"d45294fbdb4a","children":[{"_type":"span","marks":[],"text":"This file does several things:","_key":"d45294fbdb4a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"0229e5c7d7bc","children":[{"_type":"span","marks":[],"text":"Tells the frontend some basic information about the language (where to list it, what its tagline is, where to get the icon). Note that we host many of our web assets (not to mention internal tooling) on Repl.it, because we love dogfooding.","_key":"0229e5c7d7bc0"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"10b6bb08c187","children":[{"_type":"span","marks":[],"text":"Tells our Docker container manager which Docker image to use for this language; for new languages, we use Polygott.","_key":"10b6bb08c1870"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"c606f3c7f83e","children":[{"_type":"span","marks":[],"text":"Tells the container how to start a repl for the language. We use Prybar with a custom ANSI escape sequence to generate that classy repl prompt you see in every language on Repl.it.","_key":"c606f3c7f83e0"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"78092bc51919","children":[{"_type":"span","marks":[],"text":"Frontend","_key":"78092bc519190"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"a4e07654766f","children":[{"_type":"span","marks":[],"text":"All that's left at this point is to update a few configuration files on the Repl.it website. These define things like syntax highlighting rules, starter code in the Examples panel, and which categories are listed on the ","_key":"a4e07654766f0"},{"_type":"span","marks":["808f95e23aa4"],"text":"Languages","_key":"a4e07654766f1"},{"_type":"span","marks":[],"text":" page.","_key":"a4e07654766f2"}],"markDefs":[{"_key":"808f95e23aa4","_type":"link","href":"https://repl.it/languages/"}],"_type":"block","style":"normal"},{"_key":"c19a3fd028b5","children":[{"_type":"span","marks":[],"text":"Conclusion","_key":"c19a3fd028b50"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"24328eb1b97f","children":[{"_type":"span","marks":[],"text":"We are proud of how generic we have been able to make our infrastructure without sacrificing good support for individual languages. It took a lot of work to get to being able to add a language (in theory) with only a few configuration files.","_key":"24328eb1b97f0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"c410153d8c41","children":[{"_type":"span","marks":[],"text":"In fact, most of the work in adding Emacs Lisp was integrating it into Prybar. This is important to us. We think that by abstracting language differences behind a common, ","_key":"c410153d8c410"},{"_type":"span","marks":["em"],"text":"open-source","_key":"c410153d8c411"},{"_type":"span","marks":[],"text":" interface, we can not only free up more time to ship features on Repl.it, but also give back to the community in the form of better developer tooling for all.","_key":"c410153d8c412"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"393ba5ef49e1","children":[{"_type":"span","marks":[],"text":"Let us know what languages you are most excited to see on Repl.it at our ","_key":"393ba5ef49e10"},{"_type":"span","marks":["cf04f370b9bd"],"text":"language requests","_key":"393ba5ef49e11"},{"_type":"span","marks":[],"text":" page. And if you're particularly excited about one, we are always accepting pull requests on ","_key":"393ba5ef49e12"},{"_type":"span","marks":["11e657fa86f9"],"text":"Polygott","_key":"393ba5ef49e13"},{"_type":"span","marks":[],"text":" and ","_key":"393ba5ef49e14"},{"_type":"span","marks":["28acc431fff7"],"text":"Prybar","_key":"393ba5ef49e15"},{"_type":"span","marks":[],"text":"!","_key":"393ba5ef49e16"}],"markDefs":[{"_key":"cf04f370b9bd","_type":"link","href":"https://repl.it/language-requests/"},{"_key":"11e657fa86f9","_type":"link","href":"https://github.com/replit/polygott"},{"_key":"28acc431fff7","_type":"link","href":"https://github.com/replit/prybar"}],"_type":"block","style":"normal"},{"_key":"c78ca9ea54f9","children":[{"_type":"span","marks":[],"text":"P.S. Don't forget to check out ","_key":"c78ca9ea54f90"},{"_type":"span","marks":["af945f609600"],"text":"Emacs Lisp on Repl.it","_key":"c78ca9ea54f91"},{"_type":"span","marks":[],"text":".","_key":"c78ca9ea54f92"}],"markDefs":[{"_key":"af945f609600","_type":"link","href":"https://repl.it/l/elisp"}],"_type":"block","style":"normal"}],"publishedAt":"2019-06-24T21:26:53.000Z"}