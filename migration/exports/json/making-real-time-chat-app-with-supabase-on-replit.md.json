{"_id":"post-25c2053e-5d24-47c1-b733-e64cb7c0fd77","_type":"post","title":"Making a Real-Time Chat App with Supabase on Replit","slug":{"_type":"slug","current":"making-real-time-chat-app-with-supabase-on-replit"},"body":[{"_key":"bd6195ac40f6","children":[{"_type":"span","marks":["202f1e4ccbb7"],"text":"Firebase","_key":"bd6195ac40f60"},{"_type":"span","marks":[],"text":" is arguably the most popular backend as a service (BaaS) offering. It’s created by Google and comes with almost everything you’d need to create a great app, including a database, file storage, user authentication, and real-time communication. However, it’s closed source, meaning all your and your users’ data is under Google’s control.","_key":"bd6195ac40f61"}],"markDefs":[{"_key":"202f1e4ccbb7","_type":"link","href":"https://firebase.google.com"}],"_type":"block","style":"normal"},{"_key":"ecfa2c3da071","children":[{"_type":"span","marks":[],"text":"That’s where ","_key":"ecfa2c3da0710"},{"_type":"span","marks":["bbc48f3e8301"],"text":"Supabase","_key":"ecfa2c3da0711"},{"_type":"span","marks":[],"text":" can help. Supabase is an open source Firebase alternative that aims to provide a similar set of functionalities and development experience, ","_key":"ecfa2c3da0712"},{"_type":"span","marks":["em"],"text":"without","_key":"ecfa2c3da0713"},{"_type":"span","marks":[],"text":" controlling your data.","_key":"ecfa2c3da0714"}],"markDefs":[{"_key":"bbc48f3e8301","_type":"link","href":"https://supabase.io/"}],"_type":"block","style":"normal"},{"_key":"c593eb1a80cb","children":[{"_type":"span","marks":[],"text":"In this article, you’ll learn how to use Supabase together with ","_key":"c593eb1a80cb0"},{"_type":"span","marks":["25ae4a7cfbb5"],"text":"Replit","_key":"c593eb1a80cb1"},{"_type":"span","marks":[],"text":", a cloud-based IDE, to create a real-time chat app. You’ll see how powerful and versatile both Supabase and Replit are and how you can use them to create an amazing app in no time.","_key":"c593eb1a80cb2"}],"markDefs":[{"_key":"25ae4a7cfbb5","_type":"link","href":"https://replit.com/"}],"_type":"block","style":"normal"},{"_key":"cb5bb07fccb3","children":[{"_type":"span","marks":[],"text":"You can follow along with the tutorial using ","_key":"cb5bb07fccb30"},{"_type":"span","marks":["a9e2f9e03053"],"text":"this repl","_key":"cb5bb07fccb31"},{"_type":"span","marks":[],"text":".","_key":"cb5bb07fccb32"}],"markDefs":[{"_key":"a9e2f9e03053","_type":"link","href":"https://replit.com/@areknawo/Supabase-Chat"}],"_type":"block","style":"normal"},{"_key":"56d215aa5164","children":[{"_type":"span","marks":[],"text":"How the Chat App Works","_key":"56d215aa51640"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"f80fd7221128","children":[{"_type":"span","marks":[],"text":"Before diving into the code, let’s talk about the stack and how the chat works.","_key":"f80fd72211280"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"1fade482c195","children":[{"_type":"span","marks":[],"text":"To make a chat app, you need two things: the frontend and the backend. The frontend UI should contain an input form and a list of posted messages. The backend requires only a simple database to store users and their messages, and a reliable transfer method to post and retrieve messages.","_key":"1fade482c1950"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"68b45b543f05","children":[{"_type":"span","marks":[],"text":"For this tutorial, the real-time chat app will be powered by ","_key":"68b45b543f050"},{"_type":"span","marks":["dbfefa7e739a"],"text":"Vue 3","_key":"68b45b543f051"},{"_type":"span","marks":[],"text":" and ","_key":"68b45b543f052"},{"_type":"span","marks":["9f6345318889"],"text":"Tailwind CSS","_key":"68b45b543f053"},{"_type":"span","marks":[],"text":", and will allow users to post short text messages to a public space. For the sake of simplicity, users will be recognized only through IDs stored across sessions in ","_key":"68b45b543f054"},{"_type":"span","marks":["code"],"text":"localStorage","_key":"68b45b543f055"},{"_type":"span","marks":[],"text":". All of this can be done quickly using Replit.","_key":"68b45b543f056"}],"markDefs":[{"_key":"dbfefa7e739a","_type":"link","href":"https://v3.vuejs.org/"},{"_key":"9f6345318889","_type":"link","href":"https://tailwindcss.com/"}],"_type":"block","style":"normal"},{"_key":"e8d44c196f8f","children":[{"_type":"span","marks":[],"text":"The backend will be handled with Supabase’s hosted solution. They offer a ","_key":"e8d44c196f8f0"},{"_type":"span","marks":["080ede76e968"],"text":"free plan","_key":"e8d44c196f8f1"},{"_type":"span","marks":[],"text":" that is more than sufficient for this particular tutorial. All you have to do is create an account and set up a project.","_key":"e8d44c196f8f2"}],"markDefs":[{"_key":"080ede76e968","_type":"link","href":"https://supabase.com/pricing"}],"_type":"block","style":"normal"},{"_key":"e906ffff391b","children":[{"_type":"span","marks":[],"text":"Creating the Chat App","_key":"e906ffff391b0"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"a8734ca1b48a","children":[{"_type":"span","marks":[],"text":"Let’s talk through how you can implement a chat app, starting with the initial setup.","_key":"a8734ca1b48a0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"9008d3b9ce9a","children":[{"_type":"span","marks":[],"text":"Initial Setup in Replit","_key":"9008d3b9ce9a0"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"7af42942b4ad","children":[{"_type":"span","marks":[],"text":"If you haven’t already, start by ","_key":"7af42942b4ad0"},{"_type":"span","marks":["566a832e1e95"],"text":"creating a Replit account","_key":"7af42942b4ad1"},{"_type":"span","marks":[],"text":". Then, ","_key":"7af42942b4ad2"},{"_type":"span","marks":["06ce72cf9502"],"text":"log in","_key":"7af42942b4ad3"},{"_type":"span","marks":[],"text":" and create a new repl using the VueJS template:","_key":"7af42942b4ad4"}],"markDefs":[{"_key":"566a832e1e95","_type":"link","href":"https://replit.com/signup"},{"_key":"06ce72cf9502","_type":"link","href":"https://replit.com/login"}],"_type":"block","style":"normal"},{"_key":"8665599c7056","children":[{"_type":"span","_key":"8665599c70560","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"48f0b9727ab0","children":[{"_type":"span","marks":[],"text":"Inside your repl, use the shell to install the necessary dependencies:","_key":"48f0b9727ab00"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"npm install -D tailwindcss postcss autoprefixer\nnpm install @supabase/supabase-js\nnpx tailwindcss init -p\n","_key":"3998eca1770c"},{"_key":"3e160f59834c","children":[{"_type":"span","marks":[],"text":"This command installs all npm dependencies required, including the official ","_key":"3e160f59834c0"},{"_type":"span","marks":["code"],"text":"@supabase","_key":"3e160f59834c1"},{"_type":"span","marks":[],"text":" client library. Then it initializes the config files for Tailwind.","_key":"3e160f59834c2"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"d6363bea6a9f","children":[{"_type":"span","_key":"d6363bea6a9f0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"61262fed519e","children":[{"_type":"span","marks":[],"text":"To finish configuring Tailwind, add your project source files to the config file:","_key":"61262fed519e0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"// tailwind.config.js\nmodule.exports = {\n  content: [\"./index.html\", \"./src/**/*.{vue,js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n","_key":"6782fedb0dd2"},{"_key":"30999380d163","children":[{"_type":"span","marks":[],"text":"Lastly, create and import a CSS file that includes all Tailwind layers:","_key":"30999380d1630"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"/* src/tailwind.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","_key":"33734d9c9540"},{"_type":"codeBlock","language":"text","codeContent":"// src/main.js\nimport { createApp } from \"vue\";\nimport App from \"./App.vue\";\nimport \"./tailwind.css\";\n\ncreateApp(App).mount(\"#app\");\n","_key":"f23f169c5a5a"},{"_key":"43d50a943b17","children":[{"_type":"span","marks":[],"text":"Supabase Project Setup","_key":"43d50a943b170"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"d993a7485659","children":[{"_type":"span","marks":[],"text":"With the initial frontend repl set up, you can now move over to Supabase to set up the backend of your application.","_key":"d993a74856590"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"2c3e489de85a","children":[{"_type":"span","marks":[],"text":"Log in into your ","_key":"2c3e489de85a0"},{"_type":"span","marks":["c644a90928fd"],"text":"Supabase account","_key":"2c3e489de85a1"},{"_type":"span","marks":[],"text":" and create a new project:","_key":"2c3e489de85a2"}],"markDefs":[{"_key":"c644a90928fd","_type":"link","href":"https://api.supabase.io/platform/login"}],"_type":"block","style":"normal"},{"_key":"05e70653d792","children":[{"_type":"span","_key":"05e70653d7920","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"9b7d94d1df6e","children":[{"_type":"span","marks":[],"text":"Inside the new project, you’ll need to create a new table in the Postgres database to hold all your chat messages. To do that, you can use the following SQL query:","_key":"9b7d94d1df6e0"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"CREATE TABLE messages (\n  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\n  text TEXT NOT NULL,\n  username TEXT NOT NULL,\n  timestamp timestamp default now() NOT NULL\n);\n","_key":"3aafe668c25e"},{"_key":"ae7139742eac","children":[{"_type":"span","marks":[],"text":"You can run it from the SQL Editor in the Supabase dashboard:","_key":"ae7139742eac0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"9b6db1ad0660","children":[{"_type":"span","_key":"9b6db1ad06600","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"b2eb09b4b7bd","children":[{"_type":"span","marks":[],"text":"Lastly, enable real-time events on the table by first navigating to ","_key":"b2eb09b4b7bd0"},{"_type":"span","marks":["strong"],"text":"Database > Replication","_key":"b2eb09b4b7bd1"},{"_type":"span","marks":[],"text":" and clicking the ","_key":"b2eb09b4b7bd2"},{"_type":"span","marks":["strong"],"text":"0 tables","_key":"b2eb09b4b7bd3"},{"_type":"span","marks":[],"text":" button under ","_key":"b2eb09b4b7bd4"},{"_type":"span","marks":["strong"],"text":"Source","_key":"b2eb09b4b7bd5"},{"_type":"span","marks":[],"text":".","_key":"b2eb09b4b7bd6"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"8797920f4240","children":[{"_type":"span","_key":"8797920f42400","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"e78b7be66558","children":[{"_type":"span","_key":"e78b7be665580","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"4baf9d75541c","children":[{"_type":"span","marks":[],"text":"Connecting with Supabase","_key":"4baf9d75541c0"}],"markDefs":[],"_type":"block","style":"h3"},{"_key":"9c290f14b629","children":[{"_type":"span","marks":[],"text":"You’ve now set up both the frontend and backend of your application. To connect the two, you’ll need the public API key and the database endpoint of your Supabase project. You can find them in the ","_key":"9c290f14b6290"},{"_type":"span","marks":["strong"],"text":"Settings > API","_key":"9c290f14b6291"},{"_type":"span","marks":[],"text":" menu:","_key":"9c290f14b6292"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"e22c26aa63b7","children":[{"_type":"span","_key":"e22c26aa63b70","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"f64025dca349","children":[{"_type":"span","marks":[],"text":"Connecting with Supabase on the frontend can be done with its client library. All you need are the above credentials and the ","_key":"f64025dca3490"},{"_type":"span","marks":["code"],"text":"createClient","_key":"f64025dca3491"},{"_type":"span","marks":[],"text":" function.","_key":"f64025dca3492"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"// src/api.js\nimport { createClient } from \"@supabase/supabase-js\";\nimport { ref } from \"vue\";\n\nconst supabase = createClient(\"DATABASE_ENDPOINT\", \"PUBLIC_KEY\");\n","_key":"a9bc0c411d52"},{"_key":"8529a8fbaf1d","children":[{"_type":"span","marks":[],"text":"The ","_key":"8529a8fbaf1d0"},{"_type":"span","marks":["code"],"text":"supabase","_key":"8529a8fbaf1d1"},{"_type":"span","marks":[],"text":" client instance will serve as a base for a simple composable function based on the ","_key":"8529a8fbaf1d2"},{"_type":"span","marks":["7f3b9ead72f7"],"text":"Vue Composition API","_key":"8529a8fbaf1d3"},{"_type":"span","marks":[],"text":". It’ll control all the message-related actions like sending, loading, and listening for new messages.","_key":"8529a8fbaf1d4"}],"markDefs":[{"_key":"7f3b9ead72f7","_type":"link","href":"https://v3.vuejs.org/guide/composition-api-introduction.html"}],"_type":"block","style":"normal"},{"_key":"a626049def99","children":[{"_type":"span","marks":[],"text":"To implement this, start by creating the following helper functions:","_key":"a626049def990"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"// ...\nconst getUsername = () => {\n  const previousUsername = localStorage.getItem(\"username\");\n\n  if (previousUsername) {\n    return previousUsername;\n  } else {\n    const username = `user_${Math.random().toString(36).substring(2, 6)}`;\n\n    localStorage.setItem(\"username\", username);\n\n    return username;\n  }\n};\nconst getMessages = async (from, to) => {\n  const { data } = await supabase\n    .from(\"messages\")\n    .select()\n    .range(from, to)\n    .order(\"timestamp\", { ascending: false });\n\n  return data;\n};\nconst onNewMessage = (handler) => {\n  supabase\n    .from(\"messages\")\n    .on(\"INSERT\", (payload) => {\n      handler(payload.new);\n    })\n    .subscribe();\n};\nconst createNewMessage = async (username, text) => {\n    const { data } = await supabase.from(\"messages\").insert({ username, text });\n\n    return data;\n}\n","_key":"5802e2ce6e03"},{"_key":"1248d945bd91","children":[{"_type":"span","marks":[],"text":"The above code takes several actions, including:","_key":"1248d945bd910"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"56473608b03b","children":[{"_type":"span","marks":["code"],"text":"getUsername","_key":"56473608b03b0"},{"_type":"span","marks":[],"text":", which generates a random username and saves it in persistent ","_key":"56473608b03b1"},{"_type":"span","marks":["code"],"text":"localStorage","_key":"56473608b03b2"},{"_type":"span","marks":[],"text":". This username will be used to identify messages that the current user sends.","_key":"56473608b03b3"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"bd74a97c326c","children":[{"_type":"span","marks":["code"],"text":"getMessages","_key":"bd74a97c326c0"},{"_type":"span","marks":[],"text":", which uses the Supabase client to fetch messages from the given range. They’re selected from the ","_key":"bd74a97c326c1"},{"_type":"span","marks":["code"],"text":"messages","_key":"bd74a97c326c2"},{"_type":"span","marks":[],"text":" table and arranged in descending order by their timestamps.","_key":"bd74a97c326c3"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"fdfd98f96e88","children":[{"_type":"span","marks":["code"],"text":"onNewMessage","_key":"fdfd98f96e880"},{"_type":"span","marks":[],"text":", which relies on the Supabase real-time system to listen to ","_key":"fdfd98f96e881"},{"_type":"span","marks":["code"],"text":"INSERT","_key":"fdfd98f96e882"},{"_type":"span","marks":[],"text":"s into the ","_key":"fdfd98f96e883"},{"_type":"span","marks":["code"],"text":"messages","_key":"fdfd98f96e884"},{"_type":"span","marks":[],"text":" table. The newly-created messages are passed on to the provided handler.","_key":"fdfd98f96e885"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"4e77a2bb728a","children":[{"_type":"span","marks":["code"],"text":"createNewMessage","_key":"4e77a2bb728a0"},{"_type":"span","marks":[],"text":", which inserts a new message into the Supabase database with the provided username and text.","_key":"4e77a2bb728a1"}],"markDefs":[],"_type":"block","style":"normal","level":1,"listItem":"bullet"},{"_key":"8498d651ce9c","children":[{"_type":"span","marks":[],"text":"You’ll use all the above functions in the ","_key":"8498d651ce9c0"},{"_type":"span","marks":["code"],"text":"useMessages","_key":"8498d651ce9c1"},{"_type":"span","marks":[],"text":" composable to wrap the actions needed for the UI:","_key":"8498d651ce9c2"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"// ...\nconst useMessages = () => {\n  const username = getUsername();\n  const messages = ref([]);\n  const messagesCount = ref(0);\n  const maxMessagesPerRequest = 50;\n  const loadMessagesBatch = async () => {\n    const loadedMessages = await getMessages(\n      messagesCount.value,\n      maxMessagesPerRequest - 1\n    );\n\n    messages.value = [...loadedMessages, ...messages.value];\n    messagesCount.value += loadedMessages.length;\n  };\n\n  loadMessagesBatch();\n  onNewMessage((newMessage) => {\n    messages.value = [newMessage, ...messages.value];\n    messagesCount.value += 1;\n  });\n\n  return {\n    username,\n    messages,\n    async send(text) {\n      if (text) {\n        await createNewMessage(username, text);\n      }\n    },\n    loadOlder() {\n      return loadMessagesBatch();\n    },\n  };\n};\n\nexport { useMessages };\n","_key":"cbf1002e4d7b"},{"_key":"915d91c88888","children":[{"_type":"span","marks":[],"text":"This function uses the Vue Composition API to create the necessary refs, then sets up the new message listener and loads the initial batch of messages.","_key":"915d91c888880"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"4f45de099fce","children":[{"_type":"span","marks":[],"text":"The returned object contains values required for the UI, like ","_key":"4f45de099fce0"},{"_type":"span","marks":["code"],"text":"username","_key":"4f45de099fce1"},{"_type":"span","marks":[],"text":" (to check and appropriately style the user’s own messages) and ","_key":"4f45de099fce2"},{"_type":"span","marks":["code"],"text":"messages","_key":"4f45de099fce3"},{"_type":"span","marks":[],"text":", in an array. It also includes two wrapper methods, ","_key":"4f45de099fce4"},{"_type":"span","marks":["code"],"text":"send","_key":"4f45de099fce5"},{"_type":"span","marks":[],"text":" and ","_key":"4f45de099fce6"},{"_type":"span","marks":["code"],"text":"loadOlder","_key":"4f45de099fce7"},{"_type":"span","marks":[],"text":", for sending new messages and loading older ones.","_key":"4f45de099fce8"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"f5535d23c3e3","children":[{"_type":"span","marks":[],"text":"Frontend UI","_key":"f5535d23c3e30"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"dfb721f7133a","children":[{"_type":"span","marks":[],"text":"With the API connector ready, it’s time to design the frontend UI. Start by editing ","_key":"dfb721f7133a0"},{"_type":"span","marks":["code"],"text":"src/App.vue","_key":"dfb721f7133a1"},{"_type":"span","marks":[],"text":" to include a chat container and the rest of the boilerplate:","_key":"dfb721f7133a2"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"<template>\n  <div\n    class=\"max-w-screen-sm relative h-full w-full bg-gray-100 flex flex-col\"\n  ></div>\n</template>\n<script>\nimport { useMessages } from \"./api\";\nimport Message from \"./components/Message.vue\";\nimport { defineComponent, ref } from \"vue\";\n\nexport default defineComponent({\ncomponents: { Message },\n  setup() {\n    // ...\n  },\n});\n</script>\n<style>\n  html,\n  body,\n  #app {\n    @apply h-full;\n  }\n  #app {\n    @apply flex justify-center items-center;\n  }\n</style>\n","_key":"9f02fa1a5508"},{"_key":"4f603ecac7f2","children":[{"_type":"span","marks":[],"text":"With that in place, you can focus on the actual template to create the message list and message input form:","_key":"4f603ecac7f20"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"<div class=\"max-w-screen-sm relative h-full w-full bg-gray-100 flex flex-col\">\n  <ul\n    class=\"flex flex-col-reverse flex-1 overflow-y-auto\"\n    @scroll=\"handleScroll\"\n  >\n    <Message\n      v-for=\"message in messages\"\n      :username=”message.username”\n      :personal=\"message.username === username\"\n      >{{ message.text }}</Message>\n  </ul>\n  <div\n    class=\"w-[calc(100%-2rem)] h-16 m-4 p-4 bg-gray-200 rounded-lg flex justify-center items-center\"\n  >\n    <input\n      placeholder=\"Message\"\n      class=\"bg-white rounded-lg px-2 py-1 mr-2 w-full focus:outline-none focus:ring focus:ring-gray-300\"\n      v-model=\"input\"\n      @keydown=\"handleSend\"\n    />\n    <button\n      :disabled=\"!input\"\n      class=\"bg-blue-500 px-2 py-1 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50\"\n      @click=\"handleSend\"\n    >\n      Send\n    </button>\n  </div>\n</div>\n","_key":"c6e524d274c7"},{"_key":"26ad17f0d460","children":[{"_type":"span","marks":["code"],"text":"<Message>","_key":"26ad17f0d4600"},{"_type":"span","marks":[],"text":" is a separate Vue component used to display and adequately style each chat message. It’s located in the ","_key":"26ad17f0d4601"},{"_type":"span","marks":["code"],"text":"src/components/Message.vue","_key":"26ad17f0d4602"},{"_type":"span","marks":[],"text":" file:","_key":"26ad17f0d4603"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"<template>\n  <li class=\"flex\" :class=\"personal ? 'flex-row-reverse' : 'flex-row'\">\n    <div\n      class=\"p-2 rounded-lg mx-4 my-3 relative\"\n      :class=\"personal ? 'bg-blue-500 text-white' : 'bg-gray-200'\"\n    >\n      <slot></slot>\n      <div v-if=\"!personal\" class=\"absolute text-xs bg-gray-300 p-0.5 rounded-lg\">{{username}}</div>\n    </div>\n    <div class=\"flex-1\"></div>\n  </li>\n</template>\n<script>\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  props: {\n    personal: Boolean,\n    username: String\n  },\n});\n</script>\n","_key":"cdfea2b14567"},{"_key":"4d06fd126e44","children":[{"_type":"span","marks":[],"text":"The component will display the user’s own messages on the opposite side and in a different color.","_key":"4d06fd126e440"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"c3a16be71c79","children":[{"_type":"span","marks":[],"text":"Lastly, back in ","_key":"c3a16be71c790"},{"_type":"span","marks":["code"],"text":"src/App.vue","_key":"c3a16be71c791"},{"_type":"span","marks":[],"text":", you should edit the ","_key":"c3a16be71c792"},{"_type":"span","marks":["code"],"text":"<script>","_key":"c3a16be71c793"},{"_type":"span","marks":[],"text":" section to register components, define event handlers, and handle user input data:","_key":"c3a16be71c794"}],"markDefs":[],"_type":"block","style":"normal"},{"_type":"codeBlock","language":"text","codeContent":"import { useMessages } from \"./api\";\nimport Message from \"./components/Message.vue\";\nimport { defineComponent, ref } from \"vue\";\n\nexport default defineComponent({\n  components: { Message },\n  setup() {\n    const { username, messages, send, loadOlder } = useMessages();\n    const input = ref();\n    const handleScroll = (event) => {\n      if (event.target.scrollTop === 0) {\n        loadOlder();\n      }\n    };\n    const handleSend = (event) => {\n      if (!event.key || event.key === \"Enter\") {\n        send(input.value);\n        input.value = \"\";\n      }\n    };\n\n    return {\n      input,\n      username,\n      messages,\n      handleScroll,\n      handleSend,\n    };\n  },\n});\n","_key":"04dc42b7923f"},{"_key":"6be5fa502f74","children":[{"_type":"span","marks":[],"text":"The chat is now ready! Insert some data into the database to test it, either through the API, the created chat form, or right from Supabase’s Table Editor.","_key":"6be5fa502f740"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"9503e44eab6e","children":[{"_type":"span","_key":"9503e44eab6e0","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"98e0349e86f2","children":[{"_type":"span","marks":[],"text":"Here’s an example chat:","_key":"98e0349e86f20"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"c1ddb9598961","children":[{"_type":"span","_key":"c1ddb95989610","text":"","marks":[]}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"9e7da5cc9ef7","children":[{"_type":"span","marks":[],"text":"Conclusion","_key":"9e7da5cc9ef70"}],"markDefs":[],"_type":"block","style":"h2"},{"_key":"275dfeb33871","children":[{"_type":"span","marks":[],"text":"The chat app you’ve just built only scratches the surface of what can be created using Replit and Supabase. These tools have incredible potential, and with some time and patience, you can use them to build pretty much anything you want.","_key":"275dfeb338710"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"6871d7f506fb","children":[{"_type":"span","marks":[],"text":"Feel free to experiment with the chat you’ve just created. You can use Supabase Auth to add authentication, or storage to allow for file transfers. Or, you can expand the UI and integrate other APIs right from Replit. It’s your chance to build something extraordinary!","_key":"6871d7f506fb0"}],"markDefs":[],"_type":"block","style":"normal"},{"_key":"652128a8f975","children":[{"_type":"span","marks":["0ead88eba9e0"],"text":"Replit","_key":"652128a8f9750"},{"_type":"span","marks":[],"text":" is a simple yet powerful online IDE that can help you build all sorts of apps. A chat app is only the beginning, because Replit encourages you to code for fun and explore the unknown.","_key":"652128a8f9751"}],"markDefs":[{"_key":"0ead88eba9e0","_type":"link","href":"https://replit.com"}],"_type":"block","style":"normal"}],"publishedAt":"2022-03-23T00:00:00.000Z"}